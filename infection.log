Escaped mutants:
================


1) /var/www/html/src/ClassMetadataBuilder.php:78    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             }
             $metadata->addProperties(...($this->propertyGuesser)($classOrObject, $metadata));
             $metadata->addMethods(...($this->methodGuesser)($classOrObject, $metadata));
-            $metadata->addFields(...($this->fieldGuesser)($metadata));
+            
             $metadata->addRelations(...($this->relationGuesser)($metadata));
         } catch (\ReflectionException $e) {
             throw new \RuntimeException('An error occurred during class metadata building.', 0, $e);


2) /var/www/html/src/ClassMetadataBuilder.php:80    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
             $metadata->addProperties(...($this->propertyGuesser)($classOrObject, $metadata));
             $metadata->addMethods(...($this->methodGuesser)($classOrObject, $metadata));
             $metadata->addFields(...($this->fieldGuesser)($metadata));
-            $metadata->addRelations(...($this->relationGuesser)($metadata));
+            
         } catch (\ReflectionException $e) {
             throw new \RuntimeException('An error occurred during class metadata building.', 0, $e);
         }


3) /var/www/html/src/ClassTypeMetadata.php:124    [M] Foreach_

--- Original
+++ New
@@ @@
     }
     public function addFields(FieldMetadataInterface ...$fields) : self
     {
-        foreach ($fields as $field) {
+        foreach (array() as $field) {
             $this->fields[$field->getName()] = $field;
         }
         return $this;


4) /var/www/html/src/ClassTypeMetadata.php:152    [M] Foreach_

--- Original
+++ New
@@ @@
     }
     public function addRelations(RelationMetadataInterface ...$relations) : self
     {
-        foreach ($relations as $relation) {
+        foreach (array() as $relation) {
             $this->relations[$relation->getName()] = $relation;
         }
         return $this;


5) /var/www/html/src/CollectionTypeMetadata.php:20    [M] CastString

--- Original
+++ New
@@ @@
     }
     public function __toString()
     {
-        return sprintf('%s<%s>', (string) $this->type, (string) $this->inner);
+        return sprintf('%s<%s>', $this->type, (string) $this->inner);
     }
     public function getType() : ClassMetadataInterface
     {


6) /var/www/html/src/CollectionTypeMetadata.php:20    [M] CastString

--- Original
+++ New
@@ @@
     }
     public function __toString()
     {
-        return sprintf('%s<%s>', (string) $this->type, (string) $this->inner);
+        return sprintf('%s<%s>', (string) $this->type, $this->inner);
     }
     public function getType() : ClassMetadataInterface
     {


7) /var/www/html/src/FieldGuesser/PublicPropertyFieldGuesser.php:20    [M] Continue_

--- Original
+++ New
@@ @@
         foreach ($class->getProperties() as $property) {
             $types = iterator_to_array($this->filterTypes(...$property->getTypes()));
             if (count($types) <= 0) {
-                continue;
+                break;
             }
             (yield new FieldMetadata($property->getName(), ...array_values($property->getTypes())));
         }


8) /var/www/html/src/FieldGuesser/PublicPropertyFieldGuesser.php:25    [M] UnwrapArrayValues

--- Original
+++ New
@@ @@
             if (count($types) <= 0) {
                 continue;
             }
-            (yield new FieldMetadata($property->getName(), ...array_values($property->getTypes())));
+            (yield new FieldMetadata($property->getName(), ...$property->getTypes()));
         }
     }
     private function filterTypes(TypeMetadataInterface ...$types) : \Generator


9) /var/www/html/src/FieldGuesser/PublicPropertyFieldGuesser.php:36    [M] Continue_

--- Original
+++ New
@@ @@
     {
         foreach ($types as $type) {
             if (!$type instanceof ScalarTypeMetadata && !$type instanceof ArrayTypeMetadata) {
-                continue;
+                break;
             }
             (yield $type);
         }
     }

10) /var/www/html/src/MethodGuesser/ReflectionMethodGuesser.php:28    [M] UnwrapArrayMap

--- Original
+++ New
@@ @@
     public function __invoke(\ReflectionClass $classOrObject, ClassTypeMetadata $class) : \Iterator
     {
         yield from array_map(function (\ReflectionMethod $method) use($classOrObject) {
-            return new MethodMetadata($method->getName(), new ArgumentListMetadata(...array_map(function (\ReflectionParameter $parameter) use($classOrObject) {
-                if ($parameter->isVariadic()) {
-                    return new VariadicArgumentMetadata($parameter->getName(), ...($this->typeGuesser)($classOrObject, $parameter));
-                }
-                return new ArgumentMetadata($parameter->getName(), ...($this->typeGuesser)($classOrObject, $parameter));
-            }, $method->getParameters())), ...($this->typeGuesser)($classOrObject, $method));

11) /var/www/html/src/Type.php:71    [M] LogicalOr

--- Original
+++ New
@@ @@
     }
     public static function is(TypeMetadataInterface $expected, TypeMetadataInterface $actual) : bool
     {
-        if (($expected instanceof ClassTypeMetadata || $expected instanceof ClassReferenceMetadata) && ($actual instanceof ClassTypeMetadata || $actual instanceof ClassReferenceMetadata)) {
+        if ($expected instanceof ClassTypeMetadata && $expected instanceof ClassReferenceMetadata && ($actual instanceof ClassTypeMetadata || $actual instanceof ClassReferenceMetadata)) {
             return is_a((string) $expected, (string) $actual);
         }
         if ($expected instanceof ListTypeMetadata && $actual instanceof ListTypeMetadata) {


12) /var/www/html/src/Type.php:71    [M] LogicalAnd

--- Original
+++ New
@@ @@
     }
     public static function is(TypeMetadataInterface $expected, TypeMetadataInterface $actual) : bool
     {
-        if (($expected instanceof ClassTypeMetadata || $expected instanceof ClassReferenceMetadata) && ($actual instanceof ClassTypeMetadata || $actual instanceof ClassReferenceMetadata)) {
+        if ($expected instanceof ClassTypeMetadata || $expected instanceof ClassReferenceMetadata || ($actual instanceof ClassTypeMetadata || $actual instanceof ClassReferenceMetadata)) {
             return is_a((string) $expected, (string) $actual);
         }
         if ($expected instanceof ListTypeMetadata && $actual instanceof ListTypeMetadata) {


13) /var/www/html/src/Type.php:72    [M] LogicalOr

--- Original
+++ New
@@ @@
     }
     public static function is(TypeMetadataInterface $expected, TypeMetadataInterface $actual) : bool
     {
-        if (($expected instanceof ClassTypeMetadata || $expected instanceof ClassReferenceMetadata) && ($actual instanceof ClassTypeMetadata || $actual instanceof ClassReferenceMetadata)) {
+        if (($expected instanceof ClassTypeMetadata || $expected instanceof ClassReferenceMetadata) && ($actual instanceof ClassTypeMetadata && $actual instanceof ClassReferenceMetadata)) {
             return is_a((string) $expected, (string) $actual);
         }
         if ($expected instanceof ListTypeMetadata && $actual instanceof ListTypeMetadata) {


14) /var/www/html/src/Type.php:84    [M] CastString

--- Original
+++ New
@@ @@
             return self::is($expected->getType(), $actual->getType()) && is_a((string) $expected->getInner(), (string) $actual->getInner());
         }
         if ($expected instanceof ScalarTypeMetadata && $actual instanceof ScalarTypeMetadata) {
-            return (string) $expected === (string) $actual || in_array((string) $expected, self::$boolean) && in_array((string) $actual, self::$boolean) || in_array((string) $expected, self::$integer) && in_array((string) $actual, self::$integer) || in_array((string) $expected, self::$float) && in_array((string) $actual, self::$float) || in_array((string) $expected, self::$numberCompatible) && in_array((string) $actual, self::$numberMeta) || in_array((string) $expected, self::$string) && in_array((string) $actual, self::$string) || in_array((string) $expected, self::$array) && in_array((string) $actual, self::$array) || in_array((string) $expected, self::$iterable) && (in_array((string) $actual, self::$iterable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$callable) && (in_array((string) $actual, self::$callable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$resource) && in_array((string) $actual, self::$resource);
+            return (string) $expected === $actual || in_array((string) $expected, self::$boolean) && in_array((string) $actual, self::$boolean) || in_array((string) $expected, self::$integer) && in_array((string) $actual, self::$integer) || in_array((string) $expected, self::$float) && in_array((string) $actual, self::$float) || in_array((string) $expected, self::$numberCompatible) && in_array((string) $actual, self::$numberMeta) || in_array((string) $expected, self::$string) && in_array((string) $actual, self::$string) || in_array((string) $expected, self::$array) && in_array((string) $actual, self::$array) || in_array((string) $expected, self::$iterable) && (in_array((string) $actual, self::$iterable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$callable) && (in_array((string) $actual, self::$callable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$resource) && in_array((string) $actual, self::$resource);
         }
         return $expected == $actual;
     }
 }

15) /var/www/html/src/Type.php:84    [M] CastString

--- Original
+++ New
@@ @@
             return self::is($expected->getType(), $actual->getType()) && is_a((string) $expected->getInner(), (string) $actual->getInner());
         }
         if ($expected instanceof ScalarTypeMetadata && $actual instanceof ScalarTypeMetadata) {
-            return (string) $expected === (string) $actual || in_array((string) $expected, self::$boolean) && in_array((string) $actual, self::$boolean) || in_array((string) $expected, self::$integer) && in_array((string) $actual, self::$integer) || in_array((string) $expected, self::$float) && in_array((string) $actual, self::$float) || in_array((string) $expected, self::$numberCompatible) && in_array((string) $actual, self::$numberMeta) || in_array((string) $expected, self::$string) && in_array((string) $actual, self::$string) || in_array((string) $expected, self::$array) && in_array((string) $actual, self::$array) || in_array((string) $expected, self::$iterable) && (in_array((string) $actual, self::$iterable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$callable) && (in_array((string) $actual, self::$callable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$resource) && in_array((string) $actual, self::$resource);
+            return $expected === (string) $actual || in_array((string) $expected, self::$boolean) && in_array((string) $actual, self::$boolean) || in_array((string) $expected, self::$integer) && in_array((string) $actual, self::$integer) || in_array((string) $expected, self::$float) && in_array((string) $actual, self::$float) || in_array((string) $expected, self::$numberCompatible) && in_array((string) $actual, self::$numberMeta) || in_array((string) $expected, self::$string) && in_array((string) $actual, self::$string) || in_array((string) $expected, self::$array) && in_array((string) $actual, self::$array) || in_array((string) $expected, self::$iterable) && (in_array((string) $actual, self::$iterable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$callable) && (in_array((string) $actual, self::$callable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$resource) && in_array((string) $actual, self::$resource);
         }
         return $expected == $actual;
     }
 }

16) /var/www/html/src/Type.php:85    [M] CastString

--- Original
+++ New
@@ @@
             return self::is($expected->getType(), $actual->getType()) && is_a((string) $expected->getInner(), (string) $actual->getInner());
         }
         if ($expected instanceof ScalarTypeMetadata && $actual instanceof ScalarTypeMetadata) {
-            return (string) $expected === (string) $actual || in_array((string) $expected, self::$boolean) && in_array((string) $actual, self::$boolean) || in_array((string) $expected, self::$integer) && in_array((string) $actual, self::$integer) || in_array((string) $expected, self::$float) && in_array((string) $actual, self::$float) || in_array((string) $expected, self::$numberCompatible) && in_array((string) $actual, self::$numberMeta) || in_array((string) $expected, self::$string) && in_array((string) $actual, self::$string) || in_array((string) $expected, self::$array) && in_array((string) $actual, self::$array) || in_array((string) $expected, self::$iterable) && (in_array((string) $actual, self::$iterable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$callable) && (in_array((string) $actual, self::$callable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$resource) && in_array((string) $actual, self::$resource);
+            return (string) $expected === (string) $actual || in_array((string) $expected, self::$boolean) && in_array($actual, self::$boolean) || in_array((string) $expected, self::$integer) && in_array((string) $actual, self::$integer) || in_array((string) $expected, self::$float) && in_array((string) $actual, self::$float) || in_array((string) $expected, self::$numberCompatible) && in_array((string) $actual, self::$numberMeta) || in_array((string) $expected, self::$string) && in_array((string) $actual, self::$string) || in_array((string) $expected, self::$array) && in_array((string) $actual, self::$array) || in_array((string) $expected, self::$iterable) && (in_array((string) $actual, self::$iterable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$callable) && (in_array((string) $actual, self::$callable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$resource) && in_array((string) $actual, self::$resource);
         }
         return $expected == $actual;
     }
 }

17) /var/www/html/src/Type.php:85    [M] CastString

--- Original
+++ New
@@ @@
             return self::is($expected->getType(), $actual->getType()) && is_a((string) $expected->getInner(), (string) $actual->getInner());
         }
         if ($expected instanceof ScalarTypeMetadata && $actual instanceof ScalarTypeMetadata) {
-            return (string) $expected === (string) $actual || in_array((string) $expected, self::$boolean) && in_array((string) $actual, self::$boolean) || in_array((string) $expected, self::$integer) && in_array((string) $actual, self::$integer) || in_array((string) $expected, self::$float) && in_array((string) $actual, self::$float) || in_array((string) $expected, self::$numberCompatible) && in_array((string) $actual, self::$numberMeta) || in_array((string) $expected, self::$string) && in_array((string) $actual, self::$string) || in_array((string) $expected, self::$array) && in_array((string) $actual, self::$array) || in_array((string) $expected, self::$iterable) && (in_array((string) $actual, self::$iterable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$callable) && (in_array((string) $actual, self::$callable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$resource) && in_array((string) $actual, self::$resource);
+            return (string) $expected === (string) $actual || in_array($expected, self::$boolean) && in_array((string) $actual, self::$boolean) || in_array((string) $expected, self::$integer) && in_array((string) $actual, self::$integer) || in_array((string) $expected, self::$float) && in_array((string) $actual, self::$float) || in_array((string) $expected, self::$numberCompatible) && in_array((string) $actual, self::$numberMeta) || in_array((string) $expected, self::$string) && in_array((string) $actual, self::$string) || in_array((string) $expected, self::$array) && in_array((string) $actual, self::$array) || in_array((string) $expected, self::$iterable) && (in_array((string) $actual, self::$iterable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$callable) && (in_array((string) $actual, self::$callable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$resource) && in_array((string) $actual, self::$resource);
         }
         return $expected == $actual;
     }
 }

18) /var/www/html/src/Type.php:86    [M] CastString

--- Original
+++ New
@@ @@
             return self::is($expected->getType(), $actual->getType()) && is_a((string) $expected->getInner(), (string) $actual->getInner());
         }
         if ($expected instanceof ScalarTypeMetadata && $actual instanceof ScalarTypeMetadata) {
-            return (string) $expected === (string) $actual || in_array((string) $expected, self::$boolean) && in_array((string) $actual, self::$boolean) || in_array((string) $expected, self::$integer) && in_array((string) $actual, self::$integer) || in_array((string) $expected, self::$float) && in_array((string) $actual, self::$float) || in_array((string) $expected, self::$numberCompatible) && in_array((string) $actual, self::$numberMeta) || in_array((string) $expected, self::$string) && in_array((string) $actual, self::$string) || in_array((string) $expected, self::$array) && in_array((string) $actual, self::$array) || in_array((string) $expected, self::$iterable) && (in_array((string) $actual, self::$iterable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$callable) && (in_array((string) $actual, self::$callable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$resource) && in_array((string) $actual, self::$resource);
+            return (string) $expected === (string) $actual || in_array((string) $expected, self::$boolean) && in_array((string) $actual, self::$boolean) || in_array($expected, self::$integer) && in_array((string) $actual, self::$integer) || in_array((string) $expected, self::$float) && in_array((string) $actual, self::$float) || in_array((string) $expected, self::$numberCompatible) && in_array((string) $actual, self::$numberMeta) || in_array((string) $expected, self::$string) && in_array((string) $actual, self::$string) || in_array((string) $expected, self::$array) && in_array((string) $actual, self::$array) || in_array((string) $expected, self::$iterable) && (in_array((string) $actual, self::$iterable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$callable) && (in_array((string) $actual, self::$callable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$resource) && in_array((string) $actual, self::$resource);
         }
         return $expected == $actual;
     }
 }

19) /var/www/html/src/Type.php:86    [M] CastString

--- Original
+++ New
@@ @@
             return self::is($expected->getType(), $actual->getType()) && is_a((string) $expected->getInner(), (string) $actual->getInner());
         }
         if ($expected instanceof ScalarTypeMetadata && $actual instanceof ScalarTypeMetadata) {
-            return (string) $expected === (string) $actual || in_array((string) $expected, self::$boolean) && in_array((string) $actual, self::$boolean) || in_array((string) $expected, self::$integer) && in_array((string) $actual, self::$integer) || in_array((string) $expected, self::$float) && in_array((string) $actual, self::$float) || in_array((string) $expected, self::$numberCompatible) && in_array((string) $actual, self::$numberMeta) || in_array((string) $expected, self::$string) && in_array((string) $actual, self::$string) || in_array((string) $expected, self::$array) && in_array((string) $actual, self::$array) || in_array((string) $expected, self::$iterable) && (in_array((string) $actual, self::$iterable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$callable) && (in_array((string) $actual, self::$callable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$resource) && in_array((string) $actual, self::$resource);
+            return (string) $expected === (string) $actual || in_array((string) $expected, self::$boolean) && in_array((string) $actual, self::$boolean) || in_array((string) $expected, self::$integer) && in_array($actual, self::$integer) || in_array((string) $expected, self::$float) && in_array((string) $actual, self::$float) || in_array((string) $expected, self::$numberCompatible) && in_array((string) $actual, self::$numberMeta) || in_array((string) $expected, self::$string) && in_array((string) $actual, self::$string) || in_array((string) $expected, self::$array) && in_array((string) $actual, self::$array) || in_array((string) $expected, self::$iterable) && (in_array((string) $actual, self::$iterable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$callable) && (in_array((string) $actual, self::$callable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$resource) && in_array((string) $actual, self::$resource);
         }
         return $expected == $actual;
     }
 }

20) /var/www/html/src/Type.php:87    [M] CastString

--- Original
+++ New
@@ @@
             return self::is($expected->getType(), $actual->getType()) && is_a((string) $expected->getInner(), (string) $actual->getInner());
         }
         if ($expected instanceof ScalarTypeMetadata && $actual instanceof ScalarTypeMetadata) {
-            return (string) $expected === (string) $actual || in_array((string) $expected, self::$boolean) && in_array((string) $actual, self::$boolean) || in_array((string) $expected, self::$integer) && in_array((string) $actual, self::$integer) || in_array((string) $expected, self::$float) && in_array((string) $actual, self::$float) || in_array((string) $expected, self::$numberCompatible) && in_array((string) $actual, self::$numberMeta) || in_array((string) $expected, self::$string) && in_array((string) $actual, self::$string) || in_array((string) $expected, self::$array) && in_array((string) $actual, self::$array) || in_array((string) $expected, self::$iterable) && (in_array((string) $actual, self::$iterable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$callable) && (in_array((string) $actual, self::$callable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$resource) && in_array((string) $actual, self::$resource);
+            return (string) $expected === (string) $actual || in_array((string) $expected, self::$boolean) && in_array((string) $actual, self::$boolean) || in_array((string) $expected, self::$integer) && in_array((string) $actual, self::$integer) || in_array($expected, self::$float) && in_array((string) $actual, self::$float) || in_array((string) $expected, self::$numberCompatible) && in_array((string) $actual, self::$numberMeta) || in_array((string) $expected, self::$string) && in_array((string) $actual, self::$string) || in_array((string) $expected, self::$array) && in_array((string) $actual, self::$array) || in_array((string) $expected, self::$iterable) && (in_array((string) $actual, self::$iterable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$callable) && (in_array((string) $actual, self::$callable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$resource) && in_array((string) $actual, self::$resource);
         }
         return $expected == $actual;
     }
 }

21) /var/www/html/src/Type.php:87    [M] CastString

--- Original
+++ New
@@ @@
             return self::is($expected->getType(), $actual->getType()) && is_a((string) $expected->getInner(), (string) $actual->getInner());
         }
         if ($expected instanceof ScalarTypeMetadata && $actual instanceof ScalarTypeMetadata) {
-            return (string) $expected === (string) $actual || in_array((string) $expected, self::$boolean) && in_array((string) $actual, self::$boolean) || in_array((string) $expected, self::$integer) && in_array((string) $actual, self::$integer) || in_array((string) $expected, self::$float) && in_array((string) $actual, self::$float) || in_array((string) $expected, self::$numberCompatible) && in_array((string) $actual, self::$numberMeta) || in_array((string) $expected, self::$string) && in_array((string) $actual, self::$string) || in_array((string) $expected, self::$array) && in_array((string) $actual, self::$array) || in_array((string) $expected, self::$iterable) && (in_array((string) $actual, self::$iterable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$callable) && (in_array((string) $actual, self::$callable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$resource) && in_array((string) $actual, self::$resource);
+            return (string) $expected === (string) $actual || in_array((string) $expected, self::$boolean) && in_array((string) $actual, self::$boolean) || in_array((string) $expected, self::$integer) && in_array((string) $actual, self::$integer) || in_array((string) $expected, self::$float) && in_array($actual, self::$float) || in_array((string) $expected, self::$numberCompatible) && in_array((string) $actual, self::$numberMeta) || in_array((string) $expected, self::$string) && in_array((string) $actual, self::$string) || in_array((string) $expected, self::$array) && in_array((string) $actual, self::$array) || in_array((string) $expected, self::$iterable) && (in_array((string) $actual, self::$iterable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$callable) && (in_array((string) $actual, self::$callable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$resource) && in_array((string) $actual, self::$resource);
         }
         return $expected == $actual;
     }
 }

22) /var/www/html/src/Type.php:88    [M] CastString

--- Original
+++ New
@@ @@
             return self::is($expected->getType(), $actual->getType()) && is_a((string) $expected->getInner(), (string) $actual->getInner());
         }
         if ($expected instanceof ScalarTypeMetadata && $actual instanceof ScalarTypeMetadata) {
-            return (string) $expected === (string) $actual || in_array((string) $expected, self::$boolean) && in_array((string) $actual, self::$boolean) || in_array((string) $expected, self::$integer) && in_array((string) $actual, self::$integer) || in_array((string) $expected, self::$float) && in_array((string) $actual, self::$float) || in_array((string) $expected, self::$numberCompatible) && in_array((string) $actual, self::$numberMeta) || in_array((string) $expected, self::$string) && in_array((string) $actual, self::$string) || in_array((string) $expected, self::$array) && in_array((string) $actual, self::$array) || in_array((string) $expected, self::$iterable) && (in_array((string) $actual, self::$iterable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$callable) && (in_array((string) $actual, self::$callable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$resource) && in_array((string) $actual, self::$resource);
+            return (string) $expected === (string) $actual || in_array((string) $expected, self::$boolean) && in_array((string) $actual, self::$boolean) || in_array((string) $expected, self::$integer) && in_array((string) $actual, self::$integer) || in_array((string) $expected, self::$float) && in_array((string) $actual, self::$float) || in_array($expected, self::$numberCompatible) && in_array((string) $actual, self::$numberMeta) || in_array((string) $expected, self::$string) && in_array((string) $actual, self::$string) || in_array((string) $expected, self::$array) && in_array((string) $actual, self::$array) || in_array((string) $expected, self::$iterable) && (in_array((string) $actual, self::$iterable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$callable) && (in_array((string) $actual, self::$callable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$resource) && in_array((string) $actual, self::$resource);
         }
         return $expected == $actual;
     }
 }

23) /var/www/html/src/Type.php:88    [M] CastString

--- Original
+++ New
@@ @@
             return self::is($expected->getType(), $actual->getType()) && is_a((string) $expected->getInner(), (string) $actual->getInner());
         }
         if ($expected instanceof ScalarTypeMetadata && $actual instanceof ScalarTypeMetadata) {
-            return (string) $expected === (string) $actual || in_array((string) $expected, self::$boolean) && in_array((string) $actual, self::$boolean) || in_array((string) $expected, self::$integer) && in_array((string) $actual, self::$integer) || in_array((string) $expected, self::$float) && in_array((string) $actual, self::$float) || in_array((string) $expected, self::$numberCompatible) && in_array((string) $actual, self::$numberMeta) || in_array((string) $expected, self::$string) && in_array((string) $actual, self::$string) || in_array((string) $expected, self::$array) && in_array((string) $actual, self::$array) || in_array((string) $expected, self::$iterable) && (in_array((string) $actual, self::$iterable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$callable) && (in_array((string) $actual, self::$callable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$resource) && in_array((string) $actual, self::$resource);
+            return (string) $expected === (string) $actual || in_array((string) $expected, self::$boolean) && in_array((string) $actual, self::$boolean) || in_array((string) $expected, self::$integer) && in_array((string) $actual, self::$integer) || in_array((string) $expected, self::$float) && in_array((string) $actual, self::$float) || in_array((string) $expected, self::$numberCompatible) && in_array($actual, self::$numberMeta) || in_array((string) $expected, self::$string) && in_array((string) $actual, self::$string) || in_array((string) $expected, self::$array) && in_array((string) $actual, self::$array) || in_array((string) $expected, self::$iterable) && (in_array((string) $actual, self::$iterable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$callable) && (in_array((string) $actual, self::$callable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$resource) && in_array((string) $actual, self::$resource);
         }
         return $expected == $actual;
     }
 }

24) /var/www/html/src/Type.php:89    [M] CastString

--- Original
+++ New
@@ @@
             return self::is($expected->getType(), $actual->getType()) && is_a((string) $expected->getInner(), (string) $actual->getInner());
         }
         if ($expected instanceof ScalarTypeMetadata && $actual instanceof ScalarTypeMetadata) {
-            return (string) $expected === (string) $actual || in_array((string) $expected, self::$boolean) && in_array((string) $actual, self::$boolean) || in_array((string) $expected, self::$integer) && in_array((string) $actual, self::$integer) || in_array((string) $expected, self::$float) && in_array((string) $actual, self::$float) || in_array((string) $expected, self::$numberCompatible) && in_array((string) $actual, self::$numberMeta) || in_array((string) $expected, self::$string) && in_array((string) $actual, self::$string) || in_array((string) $expected, self::$array) && in_array((string) $actual, self::$array) || in_array((string) $expected, self::$iterable) && (in_array((string) $actual, self::$iterable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$callable) && (in_array((string) $actual, self::$callable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$resource) && in_array((string) $actual, self::$resource);
+            return (string) $expected === (string) $actual || in_array((string) $expected, self::$boolean) && in_array((string) $actual, self::$boolean) || in_array((string) $expected, self::$integer) && in_array((string) $actual, self::$integer) || in_array((string) $expected, self::$float) && in_array((string) $actual, self::$float) || in_array((string) $expected, self::$numberCompatible) && in_array((string) $actual, self::$numberMeta) || in_array($expected, self::$string) && in_array((string) $actual, self::$string) || in_array((string) $expected, self::$array) && in_array((string) $actual, self::$array) || in_array((string) $expected, self::$iterable) && (in_array((string) $actual, self::$iterable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$callable) && (in_array((string) $actual, self::$callable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$resource) && in_array((string) $actual, self::$resource);
         }
         return $expected == $actual;
     }
 }

25) /var/www/html/src/Type.php:89    [M] CastString

--- Original
+++ New
@@ @@
             return self::is($expected->getType(), $actual->getType()) && is_a((string) $expected->getInner(), (string) $actual->getInner());
         }
         if ($expected instanceof ScalarTypeMetadata && $actual instanceof ScalarTypeMetadata) {
-            return (string) $expected === (string) $actual || in_array((string) $expected, self::$boolean) && in_array((string) $actual, self::$boolean) || in_array((string) $expected, self::$integer) && in_array((string) $actual, self::$integer) || in_array((string) $expected, self::$float) && in_array((string) $actual, self::$float) || in_array((string) $expected, self::$numberCompatible) && in_array((string) $actual, self::$numberMeta) || in_array((string) $expected, self::$string) && in_array((string) $actual, self::$string) || in_array((string) $expected, self::$array) && in_array((string) $actual, self::$array) || in_array((string) $expected, self::$iterable) && (in_array((string) $actual, self::$iterable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$callable) && (in_array((string) $actual, self::$callable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$resource) && in_array((string) $actual, self::$resource);
+            return (string) $expected === (string) $actual || in_array((string) $expected, self::$boolean) && in_array((string) $actual, self::$boolean) || in_array((string) $expected, self::$integer) && in_array((string) $actual, self::$integer) || in_array((string) $expected, self::$float) && in_array((string) $actual, self::$float) || in_array((string) $expected, self::$numberCompatible) && in_array((string) $actual, self::$numberMeta) || in_array((string) $expected, self::$string) && in_array($actual, self::$string) || in_array((string) $expected, self::$array) && in_array((string) $actual, self::$array) || in_array((string) $expected, self::$iterable) && (in_array((string) $actual, self::$iterable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$callable) && (in_array((string) $actual, self::$callable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$resource) && in_array((string) $actual, self::$resource);
         }
         return $expected == $actual;
     }
 }

26) /var/www/html/src/Type.php:90    [M] LogicalAnd

--- Original
+++ New
@@ @@
             return self::is($expected->getType(), $actual->getType()) && is_a((string) $expected->getInner(), (string) $actual->getInner());
         }
         if ($expected instanceof ScalarTypeMetadata && $actual instanceof ScalarTypeMetadata) {
-            return (string) $expected === (string) $actual || in_array((string) $expected, self::$boolean) && in_array((string) $actual, self::$boolean) || in_array((string) $expected, self::$integer) && in_array((string) $actual, self::$integer) || in_array((string) $expected, self::$float) && in_array((string) $actual, self::$float) || in_array((string) $expected, self::$numberCompatible) && in_array((string) $actual, self::$numberMeta) || in_array((string) $expected, self::$string) && in_array((string) $actual, self::$string) || in_array((string) $expected, self::$array) && in_array((string) $actual, self::$array) || in_array((string) $expected, self::$iterable) && (in_array((string) $actual, self::$iterable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$callable) && (in_array((string) $actual, self::$callable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$resource) && in_array((string) $actual, self::$resource);
+            return (string) $expected === (string) $actual || in_array((string) $expected, self::$boolean) && in_array((string) $actual, self::$boolean) || in_array((string) $expected, self::$integer) && in_array((string) $actual, self::$integer) || in_array((string) $expected, self::$float) && in_array((string) $actual, self::$float) || in_array((string) $expected, self::$numberCompatible) && in_array((string) $actual, self::$numberMeta) || in_array((string) $expected, self::$string) && in_array((string) $actual, self::$string) || (in_array((string) $expected, self::$array) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$iterable) && (in_array((string) $actual, self::$iterable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$callable) && (in_array((string) $actual, self::$callable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$resource) && in_array((string) $actual, self::$resource);
         }
         return $expected == $actual;
     }
 }

27) /var/www/html/src/Type.php:90    [M] CastString

--- Original
+++ New
@@ @@
             return self::is($expected->getType(), $actual->getType()) && is_a((string) $expected->getInner(), (string) $actual->getInner());
         }
         if ($expected instanceof ScalarTypeMetadata && $actual instanceof ScalarTypeMetadata) {
-            return (string) $expected === (string) $actual || in_array((string) $expected, self::$boolean) && in_array((string) $actual, self::$boolean) || in_array((string) $expected, self::$integer) && in_array((string) $actual, self::$integer) || in_array((string) $expected, self::$float) && in_array((string) $actual, self::$float) || in_array((string) $expected, self::$numberCompatible) && in_array((string) $actual, self::$numberMeta) || in_array((string) $expected, self::$string) && in_array((string) $actual, self::$string) || in_array((string) $expected, self::$array) && in_array((string) $actual, self::$array) || in_array((string) $expected, self::$iterable) && (in_array((string) $actual, self::$iterable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$callable) && (in_array((string) $actual, self::$callable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$resource) && in_array((string) $actual, self::$resource);
+            return (string) $expected === (string) $actual || in_array((string) $expected, self::$boolean) && in_array((string) $actual, self::$boolean) || in_array((string) $expected, self::$integer) && in_array((string) $actual, self::$integer) || in_array((string) $expected, self::$float) && in_array((string) $actual, self::$float) || in_array((string) $expected, self::$numberCompatible) && in_array((string) $actual, self::$numberMeta) || in_array((string) $expected, self::$string) && in_array((string) $actual, self::$string) || in_array((string) $expected, self::$array) && in_array($actual, self::$array) || in_array((string) $expected, self::$iterable) && (in_array((string) $actual, self::$iterable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$callable) && (in_array((string) $actual, self::$callable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$resource) && in_array((string) $actual, self::$resource);
         }
         return $expected == $actual;
     }
 }

28) /var/www/html/src/Type.php:90    [M] CastString

--- Original
+++ New
@@ @@
             return self::is($expected->getType(), $actual->getType()) && is_a((string) $expected->getInner(), (string) $actual->getInner());
         }
         if ($expected instanceof ScalarTypeMetadata && $actual instanceof ScalarTypeMetadata) {
-            return (string) $expected === (string) $actual || in_array((string) $expected, self::$boolean) && in_array((string) $actual, self::$boolean) || in_array((string) $expected, self::$integer) && in_array((string) $actual, self::$integer) || in_array((string) $expected, self::$float) && in_array((string) $actual, self::$float) || in_array((string) $expected, self::$numberCompatible) && in_array((string) $actual, self::$numberMeta) || in_array((string) $expected, self::$string) && in_array((string) $actual, self::$string) || in_array((string) $expected, self::$array) && in_array((string) $actual, self::$array) || in_array((string) $expected, self::$iterable) && (in_array((string) $actual, self::$iterable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$callable) && (in_array((string) $actual, self::$callable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$resource) && in_array((string) $actual, self::$resource);
+            return (string) $expected === (string) $actual || in_array((string) $expected, self::$boolean) && in_array((string) $actual, self::$boolean) || in_array((string) $expected, self::$integer) && in_array((string) $actual, self::$integer) || in_array((string) $expected, self::$float) && in_array((string) $actual, self::$float) || in_array((string) $expected, self::$numberCompatible) && in_array((string) $actual, self::$numberMeta) || in_array((string) $expected, self::$string) && in_array((string) $actual, self::$string) || in_array($expected, self::$array) && in_array((string) $actual, self::$array) || in_array((string) $expected, self::$iterable) && (in_array((string) $actual, self::$iterable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$callable) && (in_array((string) $actual, self::$callable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$resource) && in_array((string) $actual, self::$resource);
         }
         return $expected == $actual;
     }
 }

29) /var/www/html/src/Type.php:91    [M] CastString

--- Original
+++ New
@@ @@
             return self::is($expected->getType(), $actual->getType()) && is_a((string) $expected->getInner(), (string) $actual->getInner());
         }
         if ($expected instanceof ScalarTypeMetadata && $actual instanceof ScalarTypeMetadata) {
-            return (string) $expected === (string) $actual || in_array((string) $expected, self::$boolean) && in_array((string) $actual, self::$boolean) || in_array((string) $expected, self::$integer) && in_array((string) $actual, self::$integer) || in_array((string) $expected, self::$float) && in_array((string) $actual, self::$float) || in_array((string) $expected, self::$numberCompatible) && in_array((string) $actual, self::$numberMeta) || in_array((string) $expected, self::$string) && in_array((string) $actual, self::$string) || in_array((string) $expected, self::$array) && in_array((string) $actual, self::$array) || in_array((string) $expected, self::$iterable) && (in_array((string) $actual, self::$iterable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$callable) && (in_array((string) $actual, self::$callable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$resource) && in_array((string) $actual, self::$resource);
+            return (string) $expected === (string) $actual || in_array((string) $expected, self::$boolean) && in_array((string) $actual, self::$boolean) || in_array((string) $expected, self::$integer) && in_array((string) $actual, self::$integer) || in_array((string) $expected, self::$float) && in_array((string) $actual, self::$float) || in_array((string) $expected, self::$numberCompatible) && in_array((string) $actual, self::$numberMeta) || in_array((string) $expected, self::$string) && in_array((string) $actual, self::$string) || in_array((string) $expected, self::$array) && in_array((string) $actual, self::$array) || in_array($expected, self::$iterable) && (in_array((string) $actual, self::$iterable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$callable) && (in_array((string) $actual, self::$callable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$resource) && in_array((string) $actual, self::$resource);
         }
         return $expected == $actual;
     }
 }

30) /var/www/html/src/Type.php:91    [M] CastString

--- Original
+++ New
@@ @@
             return self::is($expected->getType(), $actual->getType()) && is_a((string) $expected->getInner(), (string) $actual->getInner());
         }
         if ($expected instanceof ScalarTypeMetadata && $actual instanceof ScalarTypeMetadata) {
-            return (string) $expected === (string) $actual || in_array((string) $expected, self::$boolean) && in_array((string) $actual, self::$boolean) || in_array((string) $expected, self::$integer) && in_array((string) $actual, self::$integer) || in_array((string) $expected, self::$float) && in_array((string) $actual, self::$float) || in_array((string) $expected, self::$numberCompatible) && in_array((string) $actual, self::$numberMeta) || in_array((string) $expected, self::$string) && in_array((string) $actual, self::$string) || in_array((string) $expected, self::$array) && in_array((string) $actual, self::$array) || in_array((string) $expected, self::$iterable) && (in_array((string) $actual, self::$iterable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$callable) && (in_array((string) $actual, self::$callable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$resource) && in_array((string) $actual, self::$resource);
+            return (string) $expected === (string) $actual || in_array((string) $expected, self::$boolean) && in_array((string) $actual, self::$boolean) || in_array((string) $expected, self::$integer) && in_array((string) $actual, self::$integer) || in_array((string) $expected, self::$float) && in_array((string) $actual, self::$float) || in_array((string) $expected, self::$numberCompatible) && in_array((string) $actual, self::$numberMeta) || in_array((string) $expected, self::$string) && in_array((string) $actual, self::$string) || in_array((string) $expected, self::$array) && in_array((string) $actual, self::$array) || in_array((string) $expected, self::$iterable) && (in_array((string) $actual, self::$iterable) || in_array($actual, self::$array)) || in_array((string) $expected, self::$callable) && (in_array((string) $actual, self::$callable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$resource) && in_array((string) $actual, self::$resource);
         }
         return $expected == $actual;
     }
 }

31) /var/www/html/src/Type.php:91    [M] LogicalOr

--- Original
+++ New
@@ @@
             return self::is($expected->getType(), $actual->getType()) && is_a((string) $expected->getInner(), (string) $actual->getInner());
         }
         if ($expected instanceof ScalarTypeMetadata && $actual instanceof ScalarTypeMetadata) {
-            return (string) $expected === (string) $actual || in_array((string) $expected, self::$boolean) && in_array((string) $actual, self::$boolean) || in_array((string) $expected, self::$integer) && in_array((string) $actual, self::$integer) || in_array((string) $expected, self::$float) && in_array((string) $actual, self::$float) || in_array((string) $expected, self::$numberCompatible) && in_array((string) $actual, self::$numberMeta) || in_array((string) $expected, self::$string) && in_array((string) $actual, self::$string) || in_array((string) $expected, self::$array) && in_array((string) $actual, self::$array) || in_array((string) $expected, self::$iterable) && (in_array((string) $actual, self::$iterable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$callable) && (in_array((string) $actual, self::$callable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$resource) && in_array((string) $actual, self::$resource);
+            return (string) $expected === (string) $actual || in_array((string) $expected, self::$boolean) && in_array((string) $actual, self::$boolean) || in_array((string) $expected, self::$integer) && in_array((string) $actual, self::$integer) || in_array((string) $expected, self::$float) && in_array((string) $actual, self::$float) || in_array((string) $expected, self::$numberCompatible) && in_array((string) $actual, self::$numberMeta) || in_array((string) $expected, self::$string) && in_array((string) $actual, self::$string) || in_array((string) $expected, self::$array) && in_array((string) $actual, self::$array) || in_array((string) $expected, self::$iterable) && (in_array((string) $actual, self::$iterable) && in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$callable) && (in_array((string) $actual, self::$callable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$resource) && in_array((string) $actual, self::$resource);
         }
         return $expected == $actual;
     }
 }

32) /var/www/html/src/Type.php:91    [M] CastString

--- Original
+++ New
@@ @@
             return self::is($expected->getType(), $actual->getType()) && is_a((string) $expected->getInner(), (string) $actual->getInner());
         }
         if ($expected instanceof ScalarTypeMetadata && $actual instanceof ScalarTypeMetadata) {
-            return (string) $expected === (string) $actual || in_array((string) $expected, self::$boolean) && in_array((string) $actual, self::$boolean) || in_array((string) $expected, self::$integer) && in_array((string) $actual, self::$integer) || in_array((string) $expected, self::$float) && in_array((string) $actual, self::$float) || in_array((string) $expected, self::$numberCompatible) && in_array((string) $actual, self::$numberMeta) || in_array((string) $expected, self::$string) && in_array((string) $actual, self::$string) || in_array((string) $expected, self::$array) && in_array((string) $actual, self::$array) || in_array((string) $expected, self::$iterable) && (in_array((string) $actual, self::$iterable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$callable) && (in_array((string) $actual, self::$callable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$resource) && in_array((string) $actual, self::$resource);
+            return (string) $expected === (string) $actual || in_array((string) $expected, self::$boolean) && in_array((string) $actual, self::$boolean) || in_array((string) $expected, self::$integer) && in_array((string) $actual, self::$integer) || in_array((string) $expected, self::$float) && in_array((string) $actual, self::$float) || in_array((string) $expected, self::$numberCompatible) && in_array((string) $actual, self::$numberMeta) || in_array((string) $expected, self::$string) && in_array((string) $actual, self::$string) || in_array((string) $expected, self::$array) && in_array((string) $actual, self::$array) || in_array((string) $expected, self::$iterable) && (in_array($actual, self::$iterable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$callable) && (in_array((string) $actual, self::$callable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$resource) && in_array((string) $actual, self::$resource);
         }
         return $expected == $actual;
     }
 }

33) /var/www/html/src/Type.php:92    [M] LogicalOr

--- Original
+++ New
@@ @@
             return self::is($expected->getType(), $actual->getType()) && is_a((string) $expected->getInner(), (string) $actual->getInner());
         }
         if ($expected instanceof ScalarTypeMetadata && $actual instanceof ScalarTypeMetadata) {
-            return (string) $expected === (string) $actual || in_array((string) $expected, self::$boolean) && in_array((string) $actual, self::$boolean) || in_array((string) $expected, self::$integer) && in_array((string) $actual, self::$integer) || in_array((string) $expected, self::$float) && in_array((string) $actual, self::$float) || in_array((string) $expected, self::$numberCompatible) && in_array((string) $actual, self::$numberMeta) || in_array((string) $expected, self::$string) && in_array((string) $actual, self::$string) || in_array((string) $expected, self::$array) && in_array((string) $actual, self::$array) || in_array((string) $expected, self::$iterable) && (in_array((string) $actual, self::$iterable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$callable) && (in_array((string) $actual, self::$callable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$resource) && in_array((string) $actual, self::$resource);
+            return (string) $expected === (string) $actual || in_array((string) $expected, self::$boolean) && in_array((string) $actual, self::$boolean) || in_array((string) $expected, self::$integer) && in_array((string) $actual, self::$integer) || in_array((string) $expected, self::$float) && in_array((string) $actual, self::$float) || in_array((string) $expected, self::$numberCompatible) && in_array((string) $actual, self::$numberMeta) || in_array((string) $expected, self::$string) && in_array((string) $actual, self::$string) || in_array((string) $expected, self::$array) && in_array((string) $actual, self::$array) || in_array((string) $expected, self::$iterable) && (in_array((string) $actual, self::$iterable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$callable) && (in_array((string) $actual, self::$callable) && in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$resource) && in_array((string) $actual, self::$resource);
         }
         return $expected == $actual;
     }
 }

34) /var/www/html/src/Type.php:92    [M] CastString

--- Original
+++ New
@@ @@
             return self::is($expected->getType(), $actual->getType()) && is_a((string) $expected->getInner(), (string) $actual->getInner());
         }
         if ($expected instanceof ScalarTypeMetadata && $actual instanceof ScalarTypeMetadata) {
-            return (string) $expected === (string) $actual || in_array((string) $expected, self::$boolean) && in_array((string) $actual, self::$boolean) || in_array((string) $expected, self::$integer) && in_array((string) $actual, self::$integer) || in_array((string) $expected, self::$float) && in_array((string) $actual, self::$float) || in_array((string) $expected, self::$numberCompatible) && in_array((string) $actual, self::$numberMeta) || in_array((string) $expected, self::$string) && in_array((string) $actual, self::$string) || in_array((string) $expected, self::$array) && in_array((string) $actual, self::$array) || in_array((string) $expected, self::$iterable) && (in_array((string) $actual, self::$iterable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$callable) && (in_array((string) $actual, self::$callable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$resource) && in_array((string) $actual, self::$resource);
+            return (string) $expected === (string) $actual || in_array((string) $expected, self::$boolean) && in_array((string) $actual, self::$boolean) || in_array((string) $expected, self::$integer) && in_array((string) $actual, self::$integer) || in_array((string) $expected, self::$float) && in_array((string) $actual, self::$float) || in_array((string) $expected, self::$numberCompatible) && in_array((string) $actual, self::$numberMeta) || in_array((string) $expected, self::$string) && in_array((string) $actual, self::$string) || in_array((string) $expected, self::$array) && in_array((string) $actual, self::$array) || in_array((string) $expected, self::$iterable) && (in_array((string) $actual, self::$iterable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$callable) && (in_array((string) $actual, self::$callable) || in_array($actual, self::$array)) || in_array((string) $expected, self::$resource) && in_array((string) $actual, self::$resource);
         }
         return $expected == $actual;
     }
 }

35) /var/www/html/src/Type.php:92    [M] CastString

--- Original
+++ New
@@ @@
             return self::is($expected->getType(), $actual->getType()) && is_a((string) $expected->getInner(), (string) $actual->getInner());
         }
         if ($expected instanceof ScalarTypeMetadata && $actual instanceof ScalarTypeMetadata) {
-            return (string) $expected === (string) $actual || in_array((string) $expected, self::$boolean) && in_array((string) $actual, self::$boolean) || in_array((string) $expected, self::$integer) && in_array((string) $actual, self::$integer) || in_array((string) $expected, self::$float) && in_array((string) $actual, self::$float) || in_array((string) $expected, self::$numberCompatible) && in_array((string) $actual, self::$numberMeta) || in_array((string) $expected, self::$string) && in_array((string) $actual, self::$string) || in_array((string) $expected, self::$array) && in_array((string) $actual, self::$array) || in_array((string) $expected, self::$iterable) && (in_array((string) $actual, self::$iterable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$callable) && (in_array((string) $actual, self::$callable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$resource) && in_array((string) $actual, self::$resource);
+            return (string) $expected === (string) $actual || in_array((string) $expected, self::$boolean) && in_array((string) $actual, self::$boolean) || in_array((string) $expected, self::$integer) && in_array((string) $actual, self::$integer) || in_array((string) $expected, self::$float) && in_array((string) $actual, self::$float) || in_array((string) $expected, self::$numberCompatible) && in_array((string) $actual, self::$numberMeta) || in_array((string) $expected, self::$string) && in_array((string) $actual, self::$string) || in_array((string) $expected, self::$array) && in_array((string) $actual, self::$array) || in_array((string) $expected, self::$iterable) && (in_array((string) $actual, self::$iterable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$callable) && (in_array($actual, self::$callable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$resource) && in_array((string) $actual, self::$resource);
         }
         return $expected == $actual;
     }
 }

36) /var/www/html/src/Type.php:92    [M] CastString

--- Original
+++ New
@@ @@
             return self::is($expected->getType(), $actual->getType()) && is_a((string) $expected->getInner(), (string) $actual->getInner());
         }
         if ($expected instanceof ScalarTypeMetadata && $actual instanceof ScalarTypeMetadata) {
-            return (string) $expected === (string) $actual || in_array((string) $expected, self::$boolean) && in_array((string) $actual, self::$boolean) || in_array((string) $expected, self::$integer) && in_array((string) $actual, self::$integer) || in_array((string) $expected, self::$float) && in_array((string) $actual, self::$float) || in_array((string) $expected, self::$numberCompatible) && in_array((string) $actual, self::$numberMeta) || in_array((string) $expected, self::$string) && in_array((string) $actual, self::$string) || in_array((string) $expected, self::$array) && in_array((string) $actual, self::$array) || in_array((string) $expected, self::$iterable) && (in_array((string) $actual, self::$iterable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$callable) && (in_array((string) $actual, self::$callable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$resource) && in_array((string) $actual, self::$resource);
+            return (string) $expected === (string) $actual || in_array((string) $expected, self::$boolean) && in_array((string) $actual, self::$boolean) || in_array((string) $expected, self::$integer) && in_array((string) $actual, self::$integer) || in_array((string) $expected, self::$float) && in_array((string) $actual, self::$float) || in_array((string) $expected, self::$numberCompatible) && in_array((string) $actual, self::$numberMeta) || in_array((string) $expected, self::$string) && in_array((string) $actual, self::$string) || in_array((string) $expected, self::$array) && in_array((string) $actual, self::$array) || in_array((string) $expected, self::$iterable) && (in_array((string) $actual, self::$iterable) || in_array((string) $actual, self::$array)) || in_array($expected, self::$callable) && (in_array((string) $actual, self::$callable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$resource) && in_array((string) $actual, self::$resource);
         }
         return $expected == $actual;
     }
 }

37) /var/www/html/src/Type.php:93    [M] CastString

--- Original
+++ New
@@ @@
             return self::is($expected->getType(), $actual->getType()) && is_a((string) $expected->getInner(), (string) $actual->getInner());
         }
         if ($expected instanceof ScalarTypeMetadata && $actual instanceof ScalarTypeMetadata) {
-            return (string) $expected === (string) $actual || in_array((string) $expected, self::$boolean) && in_array((string) $actual, self::$boolean) || in_array((string) $expected, self::$integer) && in_array((string) $actual, self::$integer) || in_array((string) $expected, self::$float) && in_array((string) $actual, self::$float) || in_array((string) $expected, self::$numberCompatible) && in_array((string) $actual, self::$numberMeta) || in_array((string) $expected, self::$string) && in_array((string) $actual, self::$string) || in_array((string) $expected, self::$array) && in_array((string) $actual, self::$array) || in_array((string) $expected, self::$iterable) && (in_array((string) $actual, self::$iterable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$callable) && (in_array((string) $actual, self::$callable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$resource) && in_array((string) $actual, self::$resource);
+            return (string) $expected === (string) $actual || in_array((string) $expected, self::$boolean) && in_array((string) $actual, self::$boolean) || in_array((string) $expected, self::$integer) && in_array((string) $actual, self::$integer) || in_array((string) $expected, self::$float) && in_array((string) $actual, self::$float) || in_array((string) $expected, self::$numberCompatible) && in_array((string) $actual, self::$numberMeta) || in_array((string) $expected, self::$string) && in_array((string) $actual, self::$string) || in_array((string) $expected, self::$array) && in_array((string) $actual, self::$array) || in_array((string) $expected, self::$iterable) && (in_array((string) $actual, self::$iterable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$callable) && (in_array((string) $actual, self::$callable) || in_array((string) $actual, self::$array)) || in_array($expected, self::$resource) && in_array((string) $actual, self::$resource);
         }
         return $expected == $actual;
     }
 }

38) /var/www/html/src/Type.php:93    [M] CastString

--- Original
+++ New
@@ @@
             return self::is($expected->getType(), $actual->getType()) && is_a((string) $expected->getInner(), (string) $actual->getInner());
         }
         if ($expected instanceof ScalarTypeMetadata && $actual instanceof ScalarTypeMetadata) {
-            return (string) $expected === (string) $actual || in_array((string) $expected, self::$boolean) && in_array((string) $actual, self::$boolean) || in_array((string) $expected, self::$integer) && in_array((string) $actual, self::$integer) || in_array((string) $expected, self::$float) && in_array((string) $actual, self::$float) || in_array((string) $expected, self::$numberCompatible) && in_array((string) $actual, self::$numberMeta) || in_array((string) $expected, self::$string) && in_array((string) $actual, self::$string) || in_array((string) $expected, self::$array) && in_array((string) $actual, self::$array) || in_array((string) $expected, self::$iterable) && (in_array((string) $actual, self::$iterable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$callable) && (in_array((string) $actual, self::$callable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$resource) && in_array((string) $actual, self::$resource);
+            return (string) $expected === (string) $actual || in_array((string) $expected, self::$boolean) && in_array((string) $actual, self::$boolean) || in_array((string) $expected, self::$integer) && in_array((string) $actual, self::$integer) || in_array((string) $expected, self::$float) && in_array((string) $actual, self::$float) || in_array((string) $expected, self::$numberCompatible) && in_array((string) $actual, self::$numberMeta) || in_array((string) $expected, self::$string) && in_array((string) $actual, self::$string) || in_array((string) $expected, self::$array) && in_array((string) $actual, self::$array) || in_array((string) $expected, self::$iterable) && (in_array((string) $actual, self::$iterable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$callable) && (in_array((string) $actual, self::$callable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$resource) && in_array($actual, self::$resource);
         }
         return $expected == $actual;
     }
 }

39) /var/www/html/src/TypeGuesser/CompositeTypeGuesser.php:29    [M] LogicalNot

--- Original
+++ New
@@ @@
      */
     public function __invoke(\ReflectionClass $class, \Reflector $reflector) : \Iterator
     {
-        if (!$reflector instanceof \ReflectionProperty && !$reflector instanceof \ReflectionMethod && !$reflector instanceof \ReflectionParameter) {
+        if (!$reflector instanceof \ReflectionProperty && !$reflector instanceof \ReflectionMethod && $reflector instanceof \ReflectionParameter) {
             throw new \InvalidArgumentException('Expected object of type \\ReflectionProperty, \\ReflectionMethod or \\ReflectionParameter.');
         }
         if (($reflector instanceof \ReflectionProperty || $reflector instanceof \ReflectionParameter) && $reflector->getType() !== null) {


40) /var/www/html/src/TypeGuesser/Docblock/DocblockTypeGuesser.php:131    [M] LogicalAnd

--- Original
+++ New
@@ @@
             }
             return new ListTypeMetadata(in_array($iterated, Type::$builtInTypes) ? $this->builtInType($iterated) : $this->classReferenceType($this->detectFQCN($iterated, $class)));
         }
-        if ($isCollection && $iterated !== null) {
+        if ($isCollection || $iterated !== null) {
             if (in_array($type, Type::$iterable)) {
                 if (in_array($iterated, Type::$builtInTypes)) {
                     return new ListTypeMetadata($this->builtInType($iterated));


41) /var/www/html/src/VirtualMultipleRelationMetadata.php:19    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     use VirtualMultipleTrait;
     public function __construct(string $name, ?MethodMetadata $accessor = null, ?MethodMetadata $mutator = null, ?MethodMetadata $adder = null, ?MethodMetadata $remover = null, ?MethodMetadata $walker = null, ?MethodMetadata $counter = null, TypeMetadataInterface ...$types)
     {
-        parent::__construct($name, ...$types);
+        
         $this->accessor = $accessor;
         $this->mutator = $mutator;
         $this->adder = $adder;


42) /var/www/html/src/VirtualUnaryRelationMetadata.php:24    [M] MethodCallRemoval

--- Original
+++ New
@@ @@
     private $remover;
     public function __construct(string $name, ?MethodMetadata $accessor = null, ?MethodMetadata $mutator = null, ?MethodMetadata $checker = null, ?MethodMetadata $remover = null, TypeMetadataInterface ...$types)
     {
-        parent::__construct($name, ...$types);
+        
         $this->accessor = $accessor;
         $this->mutator = $mutator;
         $this->checker = $checker;

Timed Out mutants:
==================

Not Covered mutants:
====================


1) /var/www/html/src/ArgumentListMetadata.php:22    [M] FunctionCall

--- Original
+++ New
@@ @@
     }
     public function count()
     {
-        return count($this->arguments);
+        count($this->arguments);
+        return null;
     }
 }


2) /var/www/html/src/ClassMetadataBuilder.php:35    [M] CastString

--- Original
+++ New
@@ @@
     }
     public function buildFromReference(ClassReferenceMetadata $class) : ClassTypeMetadata
     {
-        return $this->buildFromFQCN((string) $class);
+        return $this->buildFromFQCN($class);
     }
     public function buildFromFQCN(string $className) : ClassTypeMetadata
     {


3) /var/www/html/src/ClassMetadataBuilder.php:43    [M] Throw_

--- Original
+++ New
@@ @@
         try {
             return $this->build(new \ReflectionClass($className));
         } catch (\ReflectionException $e) {
-            throw new \RuntimeException(strtr('The class %class.name% was not declared. It does either not exist or it does not have been auto-loaded.', ['%class.name%' => $className]), 0, $e);
+            new \RuntimeException(strtr('The class %class.name% was not declared. It does either not exist or it does not have been auto-loaded.', ['%class.name%' => $className]), 0, $e);
         }
     }
     public function buildFromObject(object $object) : ClassTypeMetadata


4) /var/www/html/src/ClassMetadataBuilder.php:46    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
         try {
             return $this->build(new \ReflectionClass($className));
         } catch (\ReflectionException $e) {
-            throw new \RuntimeException(strtr('The class %class.name% was not declared. It does either not exist or it does not have been auto-loaded.', ['%class.name%' => $className]), 0, $e);
+            throw new \RuntimeException(strtr('The class %class.name% was not declared. It does either not exist or it does not have been auto-loaded.', []), 0, $e);
         }
     }
     public function buildFromObject(object $object) : ClassTypeMetadata


5) /var/www/html/src/ClassMetadataBuilder.php:50    [M] DecrementInteger

--- Original
+++ New
@@ @@
         try {
             return $this->build(new \ReflectionClass($className));
         } catch (\ReflectionException $e) {
-            throw new \RuntimeException(strtr('The class %class.name% was not declared. It does either not exist or it does not have been auto-loaded.', ['%class.name%' => $className]), 0, $e);
+            throw new \RuntimeException(strtr('The class %class.name% was not declared. It does either not exist or it does not have been auto-loaded.', ['%class.name%' => $className]), -1, $e);
         }
     }
     public function buildFromObject(object $object) : ClassTypeMetadata


6) /var/www/html/src/ClassMetadataBuilder.php:50    [M] OneZeroInteger

--- Original
+++ New
@@ @@
         try {
             return $this->build(new \ReflectionClass($className));
         } catch (\ReflectionException $e) {
-            throw new \RuntimeException(strtr('The class %class.name% was not declared. It does either not exist or it does not have been auto-loaded.', ['%class.name%' => $className]), 0, $e);
+            throw new \RuntimeException(strtr('The class %class.name% was not declared. It does either not exist or it does not have been auto-loaded.', ['%class.name%' => $className]), 1, $e);
         }
     }
     public function buildFromObject(object $object) : ClassTypeMetadata


7) /var/www/html/src/ClassMetadataBuilder.php:69    [M] Plus

--- Original
+++ New
@@ @@
             if (($index = strrpos($fqcn, '\\')) === false) {
                 $metadata = new ClassTypeMetadata($fqcn);
             } else {
-                $metadata = new ClassTypeMetadata(substr($fqcn, $index + 1), substr($fqcn, 0, $index));
+                $metadata = new ClassTypeMetadata(substr($fqcn, $index - 1), substr($fqcn, 0, $index));
             }
             $metadata->addProperties(...($this->propertyGuesser)($classOrObject, $metadata));
             $metadata->addMethods(...($this->methodGuesser)($classOrObject, $metadata));


8) /var/www/html/src/ClassMetadataBuilder.php:69    [M] OneZeroInteger

--- Original
+++ New
@@ @@
             if (($index = strrpos($fqcn, '\\')) === false) {
                 $metadata = new ClassTypeMetadata($fqcn);
             } else {
-                $metadata = new ClassTypeMetadata(substr($fqcn, $index + 1), substr($fqcn, 0, $index));
+                $metadata = new ClassTypeMetadata(substr($fqcn, $index + 0), substr($fqcn, 0, $index));
             }
             $metadata->addProperties(...($this->propertyGuesser)($classOrObject, $metadata));
             $metadata->addMethods(...($this->methodGuesser)($classOrObject, $metadata));


9) /var/www/html/src/ClassMetadataBuilder.php:69    [M] IncrementInteger

--- Original
+++ New
@@ @@
             if (($index = strrpos($fqcn, '\\')) === false) {
                 $metadata = new ClassTypeMetadata($fqcn);
             } else {
-                $metadata = new ClassTypeMetadata(substr($fqcn, $index + 1), substr($fqcn, 0, $index));
+                $metadata = new ClassTypeMetadata(substr($fqcn, $index + 2), substr($fqcn, 0, $index));
             }
             $metadata->addProperties(...($this->propertyGuesser)($classOrObject, $metadata));
             $metadata->addMethods(...($this->methodGuesser)($classOrObject, $metadata));


10) /var/www/html/src/ClassMetadataBuilder.php:70    [M] DecrementInteger

--- Original
+++ New
@@ @@
             if (($index = strrpos($fqcn, '\\')) === false) {
                 $metadata = new ClassTypeMetadata($fqcn);
             } else {
-                $metadata = new ClassTypeMetadata(substr($fqcn, $index + 1), substr($fqcn, 0, $index));
+                $metadata = new ClassTypeMetadata(substr($fqcn, $index + 1), substr($fqcn, -1, $index));
             }
             $metadata->addProperties(...($this->propertyGuesser)($classOrObject, $metadata));
             $metadata->addMethods(...($this->methodGuesser)($classOrObject, $metadata));


11) /var/www/html/src/ClassMetadataBuilder.php:70    [M] OneZeroInteger

--- Original
+++ New
@@ @@
             if (($index = strrpos($fqcn, '\\')) === false) {
                 $metadata = new ClassTypeMetadata($fqcn);
             } else {
-                $metadata = new ClassTypeMetadata(substr($fqcn, $index + 1), substr($fqcn, 0, $index));
+                $metadata = new ClassTypeMetadata(substr($fqcn, $index + 1), substr($fqcn, 1, $index));
             }
             $metadata->addProperties(...($this->propertyGuesser)($classOrObject, $metadata));
             $metadata->addMethods(...($this->methodGuesser)($classOrObject, $metadata));


12) /var/www/html/src/ClassMetadataBuilder.php:82    [M] Throw_

--- Original
+++ New
@@ @@
             $metadata->addFields(...($this->fieldGuesser)($metadata));
             $metadata->addRelations(...($this->relationGuesser)($metadata));
         } catch (\ReflectionException $e) {
-            throw new \RuntimeException('An error occurred during class metadata building.', 0, $e);
+            new \RuntimeException('An error occurred during class metadata building.', 0, $e);
         }
         return $metadata;
     }
 }

13) /var/www/html/src/ClassMetadataBuilder.php:84    [M] OneZeroInteger

--- Original
+++ New
@@ @@
             $metadata->addFields(...($this->fieldGuesser)($metadata));
             $metadata->addRelations(...($this->relationGuesser)($metadata));
         } catch (\ReflectionException $e) {
-            throw new \RuntimeException('An error occurred during class metadata building.', 0, $e);
+            throw new \RuntimeException('An error occurred during class metadata building.', 1, $e);
         }
         return $metadata;
     }
 }

14) /var/www/html/src/ClassMetadataBuilder.php:84    [M] DecrementInteger

--- Original
+++ New
@@ @@
             $metadata->addFields(...($this->fieldGuesser)($metadata));
             $metadata->addRelations(...($this->relationGuesser)($metadata));
         } catch (\ReflectionException $e) {
-            throw new \RuntimeException('An error occurred during class metadata building.', 0, $e);
+            throw new \RuntimeException('An error occurred during class metadata building.', -1, $e);
         }
         return $metadata;
     }
 }

15) /var/www/html/src/ClassTypeMetadata.php:58    [M] Throw_

--- Original
+++ New
@@ @@
     public function getProperty(string $name) : PropertyMetadata
     {
         if (!isset($this->properties[$name])) {
-            throw new \OutOfBoundsException(strtr('There is no property named %property%', ['%property%' => $name]));
+            new \OutOfBoundsException(strtr('There is no property named %property%', ['%property%' => $name]));
         }
         return $this->properties[$name];
     }


16) /var/www/html/src/ClassTypeMetadata.php:58    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     public function getProperty(string $name) : PropertyMetadata
     {
         if (!isset($this->properties[$name])) {
-            throw new \OutOfBoundsException(strtr('There is no property named %property%', ['%property%' => $name]));
+            throw new \OutOfBoundsException(strtr('There is no property named %property%', []));
         }
         return $this->properties[$name];
     }


17) /var/www/html/src/ClassTypeMetadata.php:86    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     public function getMethod(string $name) : MethodMetadata
     {
         if (!isset($this->methods[$name])) {
-            throw new \OutOfBoundsException(strtr('There is no method named %method%', ['%method%' => $name]));
+            throw new \OutOfBoundsException(strtr('There is no method named %method%', []));
         }
         return $this->methods[$name];
     }


18) /var/www/html/src/ClassTypeMetadata.php:86    [M] Throw_

--- Original
+++ New
@@ @@
     public function getMethod(string $name) : MethodMetadata
     {
         if (!isset($this->methods[$name])) {
-            throw new \OutOfBoundsException(strtr('There is no method named %method%', ['%method%' => $name]));
+            new \OutOfBoundsException(strtr('There is no method named %method%', ['%method%' => $name]));
         }
         return $this->methods[$name];
     }


19) /var/www/html/src/ClassTypeMetadata.php:111    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return new \ArrayIterator($this->fields);
     }
-    public function getField(string $name) : FieldMetadataInterface
+    protected function getField(string $name) : FieldMetadataInterface
     {
         if (!isset($this->fields[$name])) {
             throw new \OutOfBoundsException(strtr('There is no field named %field%', ['%field%' => $name]));


20) /var/www/html/src/ClassTypeMetadata.php:113    [M] LogicalNot

--- Original
+++ New
@@ @@
     }
     public function getField(string $name) : FieldMetadataInterface
     {
-        if (!isset($this->fields[$name])) {
+        if (isset($this->fields[$name])) {
             throw new \OutOfBoundsException(strtr('There is no field named %field%', ['%field%' => $name]));
         }
         return $this->fields[$name];


21) /var/www/html/src/ClassTypeMetadata.php:114    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     public function getField(string $name) : FieldMetadataInterface
     {
         if (!isset($this->fields[$name])) {
-            throw new \OutOfBoundsException(strtr('There is no field named %field%', ['%field%' => $name]));
+            throw new \OutOfBoundsException(strtr('There is no field named %field%', []));
         }
         return $this->fields[$name];
     }


22) /var/www/html/src/ClassTypeMetadata.php:114    [M] Throw_

--- Original
+++ New
@@ @@
     public function getField(string $name) : FieldMetadataInterface
     {
         if (!isset($this->fields[$name])) {
-            throw new \OutOfBoundsException(strtr('There is no field named %field%', ['%field%' => $name]));
+            new \OutOfBoundsException(strtr('There is no field named %field%', ['%field%' => $name]));
         }
         return $this->fields[$name];
     }


23) /var/www/html/src/ClassTypeMetadata.php:139    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return new \ArrayIterator($this->relations);
     }
-    public function getRelation(string $name) : RelationMetadataInterface
+    protected function getRelation(string $name) : RelationMetadataInterface
     {
         if (!isset($this->relations[$name])) {
             throw new \OutOfBoundsException(strtr('There is no relation named %relation%', ['%relation%' => $name]));


24) /var/www/html/src/ClassTypeMetadata.php:141    [M] LogicalNot

--- Original
+++ New
@@ @@
     }
     public function getRelation(string $name) : RelationMetadataInterface
     {
-        if (!isset($this->relations[$name])) {
+        if (isset($this->relations[$name])) {
             throw new \OutOfBoundsException(strtr('There is no relation named %relation%', ['%relation%' => $name]));
         }
         return $this->relations[$name];


25) /var/www/html/src/ClassTypeMetadata.php:142    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
     public function getRelation(string $name) : RelationMetadataInterface
     {
         if (!isset($this->relations[$name])) {
-            throw new \OutOfBoundsException(strtr('There is no relation named %relation%', ['%relation%' => $name]));
+            throw new \OutOfBoundsException(strtr('There is no relation named %relation%', []));
         }
         return $this->relations[$name];
     }


26) /var/www/html/src/ClassTypeMetadata.php:142    [M] Throw_

--- Original
+++ New
@@ @@
     public function getRelation(string $name) : RelationMetadataInterface
     {
         if (!isset($this->relations[$name])) {
-            throw new \OutOfBoundsException(strtr('There is no relation named %relation%', ['%relation%' => $name]));
+            new \OutOfBoundsException(strtr('There is no relation named %relation%', ['%relation%' => $name]));
         }
         return $this->relations[$name];
     }


27) /var/www/html/src/FieldGuesser/VirtualFieldGuesser.php:20    [M] Coalesce

--- Original
+++ New
@@ @@
     private $inflector;
     public function __construct(?Inflector $inflector = null)
     {
-        $this->inflector = $inflector ?? (new English\InflectorFactory())();
+        $this->inflector = (new English\InflectorFactory())();
     }
     private function isSingular(string $field) : bool
     {


28) /var/www/html/src/FieldGuesser/VirtualFieldGuesser.php:25    [M] Identical

--- Original
+++ New
@@ @@
     }
     private function isSingular(string $field) : bool
     {
-        return $this->inflector->singularize($field) === $field;
+        return $this->inflector->singularize($field) !== $field;
     }
     public function __invoke(ClassTypeMetadata $class) : \Iterator
     {


29) /var/www/html/src/FieldGuesser/VirtualFieldGuesser.php:32    [M] Foreach_

--- Original
+++ New
@@ @@
     {
         $methodCandidates = [];
         /** @var MethodMetadata $method */
-        foreach ($class->getMethods() as $method) {
+        foreach (array() as $method) {
             if (preg_match('/is(?<fieldName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && Type::isOneOf(new ScalarTypeMetadata('bool'), ...$method->getReturnTypes()) && count($method->getArguments()) === 0) {
                 $fieldName = $this->inflector->camelize($matches['fieldName']);
                 if (!$this->isSingular($fieldName)) {


30) /var/www/html/src/FieldGuesser/VirtualFieldGuesser.php:33    [M] PregMatchMatches

--- Original
+++ New
@@ @@
         $methodCandidates = [];
         /** @var MethodMetadata $method */
         foreach ($class->getMethods() as $method) {
-            if (preg_match('/is(?<fieldName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && Type::isOneOf(new ScalarTypeMetadata('bool'), ...$method->getReturnTypes()) && count($method->getArguments()) === 0) {
+            if ((int) ($matches = array()) && Type::isOneOf(new ScalarTypeMetadata('bool'), ...$method->getReturnTypes()) && count($method->getArguments()) === 0) {
                 $fieldName = $this->inflector->camelize($matches['fieldName']);
                 if (!$this->isSingular($fieldName)) {
                     continue;


31) /var/www/html/src/FieldGuesser/VirtualFieldGuesser.php:33    [M] LogicalAnd

--- Original
+++ New
@@ @@
         $methodCandidates = [];
         /** @var MethodMetadata $method */
         foreach ($class->getMethods() as $method) {
-            if (preg_match('/is(?<fieldName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && Type::isOneOf(new ScalarTypeMetadata('bool'), ...$method->getReturnTypes()) && count($method->getArguments()) === 0) {
+            if ((preg_match('/is(?<fieldName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) || Type::isOneOf(new ScalarTypeMetadata('bool'), ...$method->getReturnTypes())) && count($method->getArguments()) === 0) {
                 $fieldName = $this->inflector->camelize($matches['fieldName']);
                 if (!$this->isSingular($fieldName)) {
                     continue;


32) /var/www/html/src/FieldGuesser/VirtualFieldGuesser.php:33    [M] LogicalAnd

--- Original
+++ New
@@ @@
         $methodCandidates = [];
         /** @var MethodMetadata $method */
         foreach ($class->getMethods() as $method) {
-            if (preg_match('/is(?<fieldName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && Type::isOneOf(new ScalarTypeMetadata('bool'), ...$method->getReturnTypes()) && count($method->getArguments()) === 0) {
+            if (preg_match('/is(?<fieldName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && Type::isOneOf(new ScalarTypeMetadata('bool'), ...$method->getReturnTypes()) || count($method->getArguments()) === 0) {
                 $fieldName = $this->inflector->camelize($matches['fieldName']);
                 if (!$this->isSingular($fieldName)) {
                     continue;


33) /var/www/html/src/FieldGuesser/VirtualFieldGuesser.php:35    [M] OneZeroInteger

--- Original
+++ New
@@ @@
         $methodCandidates = [];
         /** @var MethodMetadata $method */
         foreach ($class->getMethods() as $method) {
-            if (preg_match('/is(?<fieldName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && Type::isOneOf(new ScalarTypeMetadata('bool'), ...$method->getReturnTypes()) && count($method->getArguments()) === 0) {
+            if (preg_match('/is(?<fieldName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && Type::isOneOf(new ScalarTypeMetadata('bool'), ...$method->getReturnTypes()) && count($method->getArguments()) === 1) {
                 $fieldName = $this->inflector->camelize($matches['fieldName']);
                 if (!$this->isSingular($fieldName)) {
                     continue;


34) /var/www/html/src/FieldGuesser/VirtualFieldGuesser.php:35    [M] Identical

--- Original
+++ New
@@ @@
         $methodCandidates = [];
         /** @var MethodMetadata $method */
         foreach ($class->getMethods() as $method) {
-            if (preg_match('/is(?<fieldName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && Type::isOneOf(new ScalarTypeMetadata('bool'), ...$method->getReturnTypes()) && count($method->getArguments()) === 0) {
+            if (preg_match('/is(?<fieldName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && Type::isOneOf(new ScalarTypeMetadata('bool'), ...$method->getReturnTypes()) && count($method->getArguments()) !== 0) {
                 $fieldName = $this->inflector->camelize($matches['fieldName']);
                 if (!$this->isSingular($fieldName)) {
                     continue;


35) /var/www/html/src/FieldGuesser/VirtualFieldGuesser.php:38    [M] LogicalNot

--- Original
+++ New
@@ @@
         foreach ($class->getMethods() as $method) {
             if (preg_match('/is(?<fieldName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && Type::isOneOf(new ScalarTypeMetadata('bool'), ...$method->getReturnTypes()) && count($method->getArguments()) === 0) {
                 $fieldName = $this->inflector->camelize($matches['fieldName']);
-                if (!$this->isSingular($fieldName)) {
+                if ($this->isSingular($fieldName)) {
                     continue;
                 }
                 if (!isset($methodCandidates[$fieldName])) {


36) /var/www/html/src/FieldGuesser/VirtualFieldGuesser.php:39    [M] Continue_

--- Original
+++ New
@@ @@
             if (preg_match('/is(?<fieldName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && Type::isOneOf(new ScalarTypeMetadata('bool'), ...$method->getReturnTypes()) && count($method->getArguments()) === 0) {
                 $fieldName = $this->inflector->camelize($matches['fieldName']);
                 if (!$this->isSingular($fieldName)) {
-                    continue;
+                    break;
                 }
                 if (!isset($methodCandidates[$fieldName])) {
                     $methodCandidates[$fieldName] = [];


37) /var/www/html/src/FieldGuesser/VirtualFieldGuesser.php:41    [M] LogicalNot

--- Original
+++ New
@@ @@
                 if (!$this->isSingular($fieldName)) {
                     continue;
                 }
-                if (!isset($methodCandidates[$fieldName])) {
+                if (isset($methodCandidates[$fieldName])) {
                     $methodCandidates[$fieldName] = [];
                 }
                 $methodCandidates[$fieldName]['is'] = $method;


38) /var/www/html/src/FieldGuesser/VirtualFieldGuesser.php:46    [M] LogicalAnd

--- Original
+++ New
@@ @@
                 }
                 $methodCandidates[$fieldName]['is'] = $method;
             } else {
-                if (preg_match('/(?<action>set)(?<fieldName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && count($method->getArguments()) === 1) {
+                if (preg_match('/(?<action>set)(?<fieldName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) || count($method->getArguments()) === 1) {
                     $action = $matches['action'];
                     $fieldName = $this->inflector->camelize($matches['fieldName']);
                     if (!$this->isSingular($fieldName)) {


39) /var/www/html/src/FieldGuesser/VirtualFieldGuesser.php:46    [M] PregMatchMatches

--- Original
+++ New
@@ @@
                 }
                 $methodCandidates[$fieldName]['is'] = $method;
             } else {
-                if (preg_match('/(?<action>set)(?<fieldName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && count($method->getArguments()) === 1) {
+                if ((int) ($matches = array()) && count($method->getArguments()) === 1) {
                     $action = $matches['action'];
                     $fieldName = $this->inflector->camelize($matches['fieldName']);
                     if (!$this->isSingular($fieldName)) {


40) /var/www/html/src/FieldGuesser/VirtualFieldGuesser.php:47    [M] IncrementInteger

--- Original
+++ New
@@ @@
                 }
                 $methodCandidates[$fieldName]['is'] = $method;
             } else {
-                if (preg_match('/(?<action>set)(?<fieldName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && count($method->getArguments()) === 1) {
+                if (preg_match('/(?<action>set)(?<fieldName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && count($method->getArguments()) === 2) {
                     $action = $matches['action'];
                     $fieldName = $this->inflector->camelize($matches['fieldName']);
                     if (!$this->isSingular($fieldName)) {


41) /var/www/html/src/FieldGuesser/VirtualFieldGuesser.php:47    [M] Identical

--- Original
+++ New
@@ @@
                 }
                 $methodCandidates[$fieldName]['is'] = $method;
             } else {
-                if (preg_match('/(?<action>set)(?<fieldName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && count($method->getArguments()) === 1) {
+                if (preg_match('/(?<action>set)(?<fieldName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && count($method->getArguments()) !== 1) {
                     $action = $matches['action'];
                     $fieldName = $this->inflector->camelize($matches['fieldName']);
                     if (!$this->isSingular($fieldName)) {


42) /var/www/html/src/FieldGuesser/VirtualFieldGuesser.php:47    [M] OneZeroInteger

--- Original
+++ New
@@ @@
                 }
                 $methodCandidates[$fieldName]['is'] = $method;
             } else {
-                if (preg_match('/(?<action>set)(?<fieldName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && count($method->getArguments()) === 1) {
+                if (preg_match('/(?<action>set)(?<fieldName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && count($method->getArguments()) === 0) {
                     $action = $matches['action'];
                     $fieldName = $this->inflector->camelize($matches['fieldName']);
                     if (!$this->isSingular($fieldName)) {


43) /var/www/html/src/FieldGuesser/VirtualFieldGuesser.php:51    [M] LogicalNot

--- Original
+++ New
@@ @@
                 if (preg_match('/(?<action>set)(?<fieldName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && count($method->getArguments()) === 1) {
                     $action = $matches['action'];
                     $fieldName = $this->inflector->camelize($matches['fieldName']);
-                    if (!$this->isSingular($fieldName)) {
+                    if ($this->isSingular($fieldName)) {
                         continue;
                     }
                     if (!isset($methodCandidates[$fieldName])) {


44) /var/www/html/src/FieldGuesser/VirtualFieldGuesser.php:52    [M] Continue_

--- Original
+++ New
@@ @@
                     $action = $matches['action'];
                     $fieldName = $this->inflector->camelize($matches['fieldName']);
                     if (!$this->isSingular($fieldName)) {
-                        continue;
+                        break;
                     }
                     if (!isset($methodCandidates[$fieldName])) {
                         $methodCandidates[$fieldName] = [];


45) /var/www/html/src/FieldGuesser/VirtualFieldGuesser.php:54    [M] LogicalNot

--- Original
+++ New
@@ @@
                     if (!$this->isSingular($fieldName)) {
                         continue;
                     }
-                    if (!isset($methodCandidates[$fieldName])) {
+                    if (isset($methodCandidates[$fieldName])) {
                         $methodCandidates[$fieldName] = [];
                     }
                     $methodCandidates[$fieldName][$action] = $method;


46) /var/www/html/src/FieldGuesser/VirtualFieldGuesser.php:59    [M] LogicalAnd

--- Original
+++ New
@@ @@
                     }
                     $methodCandidates[$fieldName][$action] = $method;
                 } else {
-                    if (preg_match('/(?<action>unset|remove|get|has)(?<fieldName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && count($method->getArguments()) === 0) {
+                    if (preg_match('/(?<action>unset|remove|get|has)(?<fieldName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) || count($method->getArguments()) === 0) {
                         $action = $matches['action'];
                         $fieldName = $this->inflector->camelize($matches['fieldName']);
                         if (!$this->isSingular($fieldName)) {


47) /var/www/html/src/FieldGuesser/VirtualFieldGuesser.php:59    [M] PregMatchMatches

--- Original
+++ New
@@ @@
                     }
                     $methodCandidates[$fieldName][$action] = $method;
                 } else {
-                    if (preg_match('/(?<action>unset|remove|get|has)(?<fieldName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && count($method->getArguments()) === 0) {
+                    if ((int) ($matches = array()) && count($method->getArguments()) === 0) {
                         $action = $matches['action'];
                         $fieldName = $this->inflector->camelize($matches['fieldName']);
                         if (!$this->isSingular($fieldName)) {


48) /var/www/html/src/FieldGuesser/VirtualFieldGuesser.php:60    [M] Identical

--- Original
+++ New
@@ @@
                     }
                     $methodCandidates[$fieldName][$action] = $method;
                 } else {
-                    if (preg_match('/(?<action>unset|remove|get|has)(?<fieldName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && count($method->getArguments()) === 0) {
+                    if (preg_match('/(?<action>unset|remove|get|has)(?<fieldName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && count($method->getArguments()) !== 0) {
                         $action = $matches['action'];
                         $fieldName = $this->inflector->camelize($matches['fieldName']);
                         if (!$this->isSingular($fieldName)) {


49) /var/www/html/src/FieldGuesser/VirtualFieldGuesser.php:60    [M] OneZeroInteger

--- Original
+++ New
@@ @@
                     }
                     $methodCandidates[$fieldName][$action] = $method;
                 } else {
-                    if (preg_match('/(?<action>unset|remove|get|has)(?<fieldName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && count($method->getArguments()) === 0) {
+                    if (preg_match('/(?<action>unset|remove|get|has)(?<fieldName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && count($method->getArguments()) === 1) {
                         $action = $matches['action'];
                         $fieldName = $this->inflector->camelize($matches['fieldName']);
                         if (!$this->isSingular($fieldName)) {


50) /var/www/html/src/FieldGuesser/VirtualFieldGuesser.php:64    [M] LogicalNot

--- Original
+++ New
@@ @@
                     if (preg_match('/(?<action>unset|remove|get|has)(?<fieldName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && count($method->getArguments()) === 0) {
                         $action = $matches['action'];
                         $fieldName = $this->inflector->camelize($matches['fieldName']);
-                        if (!$this->isSingular($fieldName)) {
+                        if ($this->isSingular($fieldName)) {
                             continue;
                         }
                         if (!isset($methodCandidates[$fieldName])) {


51) /var/www/html/src/FieldGuesser/VirtualFieldGuesser.php:65    [M] Continue_

--- Original
+++ New
@@ @@
                         $action = $matches['action'];
                         $fieldName = $this->inflector->camelize($matches['fieldName']);
                         if (!$this->isSingular($fieldName)) {
-                            continue;
+                            break;
                         }
                         if (!isset($methodCandidates[$fieldName])) {
                             $methodCandidates[$fieldName] = [];


52) /var/www/html/src/FieldGuesser/VirtualFieldGuesser.php:67    [M] LogicalNot

--- Original
+++ New
@@ @@
                         if (!$this->isSingular($fieldName)) {
                             continue;
                         }
-                        if (!isset($methodCandidates[$fieldName])) {
+                        if (isset($methodCandidates[$fieldName])) {
                             $methodCandidates[$fieldName] = [];
                         }
                         $methodCandidates[$fieldName][$action] = $method;


53) /var/www/html/src/FieldGuesser/VirtualFieldGuesser.php:75    [M] Foreach_

--- Original
+++ New
@@ @@
                 }
             }
         }
-        foreach ($methodCandidates as $fieldName => $actions) {
+        foreach (array() as $fieldName => $actions) {
             /** @var MethodMetadata $accessor */
             $accessor = $actions['get'] ?? $actions['is'] ?? null;
             /** @var MethodMetadata $mutator */


54) /var/www/html/src/FieldGuesser/VirtualFieldGuesser.php:77    [M] Coalesce

--- Original
+++ New
@@ @@
         }
         foreach ($methodCandidates as $fieldName => $actions) {
             /** @var MethodMetadata $accessor */
-            $accessor = $actions['get'] ?? $actions['is'] ?? null;
+            $accessor = $actions['is'] ?? null;
             /** @var MethodMetadata $mutator */
             $mutator = $actions['set'] ?? null;
             if (!isset($accessor) && !isset($mutator)) {


55) /var/www/html/src/FieldGuesser/VirtualFieldGuesser.php:77    [M] Coalesce

--- Original
+++ New
@@ @@
         }
         foreach ($methodCandidates as $fieldName => $actions) {
             /** @var MethodMetadata $accessor */
-            $accessor = $actions['get'] ?? $actions['is'] ?? null;
+            $accessor = $actions['get'] ?? null;
             /** @var MethodMetadata $mutator */
             $mutator = $actions['set'] ?? null;
             if (!isset($accessor) && !isset($mutator)) {


56) /var/www/html/src/FieldGuesser/VirtualFieldGuesser.php:79    [M] Coalesce

--- Original
+++ New
@@ @@
             /** @var MethodMetadata $accessor */
             $accessor = $actions['get'] ?? $actions['is'] ?? null;
             /** @var MethodMetadata $mutator */
-            $mutator = $actions['set'] ?? null;
+            $mutator = null;
             if (!isset($accessor) && !isset($mutator)) {
                 continue;
             }


57) /var/www/html/src/FieldGuesser/VirtualFieldGuesser.php:81    [M] LogicalNot

--- Original
+++ New
@@ @@
             $accessor = $actions['get'] ?? $actions['is'] ?? null;
             /** @var MethodMetadata $mutator */
             $mutator = $actions['set'] ?? null;
-            if (!isset($accessor) && !isset($mutator)) {
+            if (!isset($accessor) && isset($mutator)) {
                 continue;
             }
             (yield new VirtualFieldMetadata($fieldName, $accessor, $mutator, $actions['has'] ?? null, $actions['unset'] ?? $actions['remove'] ?? null));


58) /var/www/html/src/FieldGuesser/VirtualFieldGuesser.php:81    [M] LogicalAnd

--- Original
+++ New
@@ @@
             $accessor = $actions['get'] ?? $actions['is'] ?? null;
             /** @var MethodMetadata $mutator */
             $mutator = $actions['set'] ?? null;
-            if (!isset($accessor) && !isset($mutator)) {
+            if (!isset($accessor) || !isset($mutator)) {
                 continue;
             }
             (yield new VirtualFieldMetadata($fieldName, $accessor, $mutator, $actions['has'] ?? null, $actions['unset'] ?? $actions['remove'] ?? null));


59) /var/www/html/src/FieldGuesser/VirtualFieldGuesser.php:81    [M] LogicalNot

--- Original
+++ New
@@ @@
             $accessor = $actions['get'] ?? $actions['is'] ?? null;
             /** @var MethodMetadata $mutator */
             $mutator = $actions['set'] ?? null;
-            if (!isset($accessor) && !isset($mutator)) {
+            if (isset($accessor) && !isset($mutator)) {
                 continue;
             }
             (yield new VirtualFieldMetadata($fieldName, $accessor, $mutator, $actions['has'] ?? null, $actions['unset'] ?? $actions['remove'] ?? null));


60) /var/www/html/src/FieldGuesser/VirtualFieldGuesser.php:82    [M] Continue_

--- Original
+++ New
@@ @@
             /** @var MethodMetadata $mutator */
             $mutator = $actions['set'] ?? null;
             if (!isset($accessor) && !isset($mutator)) {
-                continue;
+                break;
             }
             (yield new VirtualFieldMetadata($fieldName, $accessor, $mutator, $actions['has'] ?? null, $actions['unset'] ?? $actions['remove'] ?? null));
         }
     }

61) /var/www/html/src/FieldGuesser/VirtualFieldGuesser.php:89    [M] Coalesce

--- Original
+++ New
@@ @@
             if (!isset($accessor) && !isset($mutator)) {
                 continue;
             }
-            (yield new VirtualFieldMetadata($fieldName, $accessor, $mutator, $actions['has'] ?? null, $actions['unset'] ?? $actions['remove'] ?? null));
+            (yield new VirtualFieldMetadata($fieldName, $accessor, $mutator, null, $actions['unset'] ?? $actions['remove'] ?? null));
         }
     }
 }


62) /var/www/html/src/FieldGuesser/VirtualFieldGuesser.php:90    [M] Coalesce

--- Original
+++ New
@@ @@
             if (!isset($accessor) && !isset($mutator)) {
                 continue;
             }
-            (yield new VirtualFieldMetadata($fieldName, $accessor, $mutator, $actions['has'] ?? null, $actions['unset'] ?? $actions['remove'] ?? null));
+            (yield new VirtualFieldMetadata($fieldName, $accessor, $mutator, $actions['has'] ?? null, $actions['remove'] ?? null));
         }
     }
 }


63) /var/www/html/src/FieldGuesser/VirtualFieldGuesser.php:90    [M] Coalesce

--- Original
+++ New
@@ @@
             if (!isset($accessor) && !isset($mutator)) {
                 continue;
             }
-            (yield new VirtualFieldMetadata($fieldName, $accessor, $mutator, $actions['has'] ?? null, $actions['unset'] ?? $actions['remove'] ?? null));
+            (yield new VirtualFieldMetadata($fieldName, $accessor, $mutator, $actions['has'] ?? null, $actions['unset'] ?? null));
         }
     }
 }


64) /var/www/html/src/MethodGuesser/ReflectionMethodGuesser.php:30    [M] NewObject

--- Original
+++ New
@@ @@
         yield from array_map(function (\ReflectionMethod $method) use($classOrObject) {
             return new MethodMetadata($method->getName(), new ArgumentListMetadata(...array_map(function (\ReflectionParameter $parameter) use($classOrObject) {
                 if ($parameter->isVariadic()) {
-                    return new VariadicArgumentMetadata($parameter->getName(), ...($this->typeGuesser)($classOrObject, $parameter));
+                    new VariadicArgumentMetadata($parameter->getName(), ...($this->typeGuesser)($classOrObject, $parameter));
+                    return null;
                 }
                 return new ArgumentMetadata($parameter->getName(), ...($this->typeGuesser)($classOrObject, $parameter));
             }, $method->getParameters())), ...($this->typeGuesser)($classOrObject, $method));

65) /var/www/html/src/MethodGuesser/ReflectionMethodGuesser.php:35    [M] NewObject

--- Original
+++ New
@@ @@
                 if ($parameter->isVariadic()) {
                     return new VariadicArgumentMetadata($parameter->getName(), ...($this->typeGuesser)($classOrObject, $parameter));
                 }
-                return new ArgumentMetadata($parameter->getName(), ...($this->typeGuesser)($classOrObject, $parameter));
+                new ArgumentMetadata($parameter->getName(), ...($this->typeGuesser)($classOrObject, $parameter));
+                return null;
             }, $method->getParameters())), ...($this->typeGuesser)($classOrObject, $method));
         }, $classOrObject->getMethods(\ReflectionMethod::IS_PUBLIC));
     }

66) /var/www/html/src/MethodMetadata.php:21    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $this->arguments = $argumentList;
         $this->returnTypes = $returnTypes;
     }
-    public function getArguments() : ArgumentListMetadata
+    protected function getArguments() : ArgumentListMetadata
     {
         return $this->arguments;
     }


67) /var/www/html/src/RelationGuesser/PublicPropertyMultipleRelationGuesser.php:15    [M] Foreach_

--- Original
+++ New
@@ @@
 {
     public function __invoke(ClassTypeMetadata $class) : \Iterator
     {
-        foreach ($class->getProperties() as $property) {
+        foreach (array() as $property) {
             $types = iterator_to_array($this->filterTypes(...$property->getTypes()));
             if (count($types) <= 0) {
                 continue;


68) /var/www/html/src/RelationGuesser/PublicPropertyMultipleRelationGuesser.php:17    [M] LessThanOrEqualTo

--- Original
+++ New
@@ @@
     {
         foreach ($class->getProperties() as $property) {
             $types = iterator_to_array($this->filterTypes(...$property->getTypes()));
-            if (count($types) <= 0) {
+            if (count($types) < 0) {
                 continue;
             }
             (yield new MultipleRelationMetadata($property->getName(), ...$types));


69) /var/www/html/src/RelationGuesser/PublicPropertyMultipleRelationGuesser.php:17    [M] LessThanOrEqualToNegotiation

--- Original
+++ New
@@ @@
     {
         foreach ($class->getProperties() as $property) {
             $types = iterator_to_array($this->filterTypes(...$property->getTypes()));
-            if (count($types) <= 0) {
+            if (count($types) > 0) {
                 continue;
             }
             (yield new MultipleRelationMetadata($property->getName(), ...$types));


70) /var/www/html/src/RelationGuesser/PublicPropertyMultipleRelationGuesser.php:18    [M] Continue_

--- Original
+++ New
@@ @@
         foreach ($class->getProperties() as $property) {
             $types = iterator_to_array($this->filterTypes(...$property->getTypes()));
             if (count($types) <= 0) {
-                continue;
+                break;
             }
             (yield new MultipleRelationMetadata($property->getName(), ...$types));
         }


71) /var/www/html/src/RelationGuesser/PublicPropertyMultipleRelationGuesser.php:30    [M] Foreach_

--- Original
+++ New
@@ @@
     }
     private function filterTypes(TypeMetadataInterface ...$types) : \Generator
     {
-        foreach ($types as $type) {
+        foreach (array() as $type) {
             if (!$type instanceof ListTypeMetadata && !$type instanceof CollectionTypeMetadata) {
                 continue;
             }


72) /var/www/html/src/RelationGuesser/PublicPropertyMultipleRelationGuesser.php:31    [M] LogicalNot

--- Original
+++ New
@@ @@
     private function filterTypes(TypeMetadataInterface ...$types) : \Generator
     {
         foreach ($types as $type) {
-            if (!$type instanceof ListTypeMetadata && !$type instanceof CollectionTypeMetadata) {
+            if ($type instanceof ListTypeMetadata && !$type instanceof CollectionTypeMetadata) {
                 continue;
             }
             (yield $type);


73) /var/www/html/src/RelationGuesser/PublicPropertyMultipleRelationGuesser.php:31    [M] LogicalAnd

--- Original
+++ New
@@ @@
     private function filterTypes(TypeMetadataInterface ...$types) : \Generator
     {
         foreach ($types as $type) {
-            if (!$type instanceof ListTypeMetadata && !$type instanceof CollectionTypeMetadata) {
+            if (!$type instanceof ListTypeMetadata || !$type instanceof CollectionTypeMetadata) {
                 continue;
             }
             (yield $type);


74) /var/www/html/src/RelationGuesser/PublicPropertyMultipleRelationGuesser.php:32    [M] LogicalNot

--- Original
+++ New
@@ @@
     private function filterTypes(TypeMetadataInterface ...$types) : \Generator
     {
         foreach ($types as $type) {
-            if (!$type instanceof ListTypeMetadata && !$type instanceof CollectionTypeMetadata) {
+            if (!$type instanceof ListTypeMetadata && $type instanceof CollectionTypeMetadata) {
                 continue;
             }
             (yield $type);


75) /var/www/html/src/RelationGuesser/PublicPropertyMultipleRelationGuesser.php:34    [M] Continue_

--- Original
+++ New
@@ @@
     {
         foreach ($types as $type) {
             if (!$type instanceof ListTypeMetadata && !$type instanceof CollectionTypeMetadata) {
-                continue;
+                break;
             }
             (yield $type);
         }
     }

76) /var/www/html/src/RelationGuesser/PublicPropertyUnaryRelationGuesser.php:14    [M] Foreach_

--- Original
+++ New
@@ @@
 {
     public function __invoke(ClassTypeMetadata $class) : \Iterator
     {
-        foreach ($class->getProperties() as $property) {
+        foreach (array() as $property) {
             $types = iterator_to_array($this->filterTypes(...$property->getTypes()));
             if (count($types) <= 0) {
                 continue;


77) /var/www/html/src/RelationGuesser/PublicPropertyUnaryRelationGuesser.php:16    [M] LessThanOrEqualToNegotiation

--- Original
+++ New
@@ @@
     {
         foreach ($class->getProperties() as $property) {
             $types = iterator_to_array($this->filterTypes(...$property->getTypes()));
-            if (count($types) <= 0) {
+            if (count($types) > 0) {
                 continue;
             }
             (yield new UnaryRelationMetadata($property->getName(), ...$types));


78) /var/www/html/src/RelationGuesser/PublicPropertyUnaryRelationGuesser.php:16    [M] LessThanOrEqualTo

--- Original
+++ New
@@ @@
     {
         foreach ($class->getProperties() as $property) {
             $types = iterator_to_array($this->filterTypes(...$property->getTypes()));
-            if (count($types) <= 0) {
+            if (count($types) < 0) {
                 continue;
             }
             (yield new UnaryRelationMetadata($property->getName(), ...$types));


79) /var/www/html/src/RelationGuesser/PublicPropertyUnaryRelationGuesser.php:17    [M] Continue_

--- Original
+++ New
@@ @@
         foreach ($class->getProperties() as $property) {
             $types = iterator_to_array($this->filterTypes(...$property->getTypes()));
             if (count($types) <= 0) {
-                continue;
+                break;
             }
             (yield new UnaryRelationMetadata($property->getName(), ...$types));
         }


80) /var/www/html/src/RelationGuesser/PublicPropertyUnaryRelationGuesser.php:29    [M] Foreach_

--- Original
+++ New
@@ @@
     }
     private function filterTypes(TypeMetadataInterface ...$types) : \Generator
     {
-        foreach ($types as $type) {
+        foreach (array() as $type) {
             if (!$type instanceof CompositeTypeMetadataInterface) {
                 continue;
             }


81) /var/www/html/src/RelationGuesser/PublicPropertyUnaryRelationGuesser.php:30    [M] LogicalNot

--- Original
+++ New
@@ @@
     private function filterTypes(TypeMetadataInterface ...$types) : \Generator
     {
         foreach ($types as $type) {
-            if (!$type instanceof CompositeTypeMetadataInterface) {
+            if ($type instanceof CompositeTypeMetadataInterface) {
                 continue;
             }
             (yield $type);


82) /var/www/html/src/RelationGuesser/PublicPropertyUnaryRelationGuesser.php:31    [M] Continue_

--- Original
+++ New
@@ @@
     {
         foreach ($types as $type) {
             if (!$type instanceof CompositeTypeMetadataInterface) {
-                continue;
+                break;
             }
             (yield $type);
         }
     }

83) /var/www/html/src/RelationGuesser/RelationGuesserChain.php:19    [M] Foreach_

--- Original
+++ New
@@ @@
     }
     public function __invoke(ClassTypeMetadata $class) : \Iterator
     {
-        foreach ($this->inner as $guesser) {
+        foreach (array() as $guesser) {
             yield from $guesser($class);
         }
     }
 }

84) /var/www/html/src/RelationGuesser/VirtualRelationGuesser.php:26    [M] Identical

--- Original
+++ New
@@ @@
     }
     private function isPlural(string $field) : bool
     {
-        return $this->inflector->pluralize($field) === $field;
+        return $this->inflector->pluralize($field) !== $field;
     }
     private function isSingular(string $field) : bool
     {


85) /var/www/html/src/RelationGuesser/VirtualRelationGuesser.php:31    [M] Identical

--- Original
+++ New
@@ @@
     }
     private function isSingular(string $field) : bool
     {
-        return $this->inflector->singularize($field) === $field;
+        return $this->inflector->singularize($field) !== $field;
     }
     public function __invoke(ClassTypeMetadata $class) : \Iterator
     {


86) /var/www/html/src/RelationGuesser/VirtualRelationGuesser.php:38    [M] Foreach_

--- Original
+++ New
@@ @@
     {
         $methodCandidates = [];
         /** @var MethodMetadata $method */
-        foreach ($class->getMethods() as $method) {
+        foreach (array() as $method) {
             if (preg_match('/(?<action>set|remove|add|has)(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && count($method->getArguments()) === 1) {
                 $action = $matches['action'];
                 $relationName = $this->inflector->camelize($matches['relationName']);


87) /var/www/html/src/RelationGuesser/VirtualRelationGuesser.php:39    [M] PregMatchMatches

--- Original
+++ New
@@ @@
         $methodCandidates = [];
         /** @var MethodMetadata $method */
         foreach ($class->getMethods() as $method) {
-            if (preg_match('/(?<action>set|remove|add|has)(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && count($method->getArguments()) === 1) {
+            if ((int) ($matches = array()) && count($method->getArguments()) === 1) {
                 $action = $matches['action'];
                 $relationName = $this->inflector->camelize($matches['relationName']);
                 if (!isset($methodCandidates[$relationName])) {


88) /var/www/html/src/RelationGuesser/VirtualRelationGuesser.php:39    [M] LogicalAnd

--- Original
+++ New
@@ @@
         $methodCandidates = [];
         /** @var MethodMetadata $method */
         foreach ($class->getMethods() as $method) {
-            if (preg_match('/(?<action>set|remove|add|has)(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && count($method->getArguments()) === 1) {
+            if (preg_match('/(?<action>set|remove|add|has)(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) || count($method->getArguments()) === 1) {
                 $action = $matches['action'];
                 $relationName = $this->inflector->camelize($matches['relationName']);
                 if (!isset($methodCandidates[$relationName])) {


89) /var/www/html/src/RelationGuesser/VirtualRelationGuesser.php:40    [M] IncrementInteger

--- Original
+++ New
@@ @@
         $methodCandidates = [];
         /** @var MethodMetadata $method */
         foreach ($class->getMethods() as $method) {
-            if (preg_match('/(?<action>set|remove|add|has)(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && count($method->getArguments()) === 1) {
+            if (preg_match('/(?<action>set|remove|add|has)(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && count($method->getArguments()) === 2) {
                 $action = $matches['action'];
                 $relationName = $this->inflector->camelize($matches['relationName']);
                 if (!isset($methodCandidates[$relationName])) {


90) /var/www/html/src/RelationGuesser/VirtualRelationGuesser.php:40    [M] Identical

--- Original
+++ New
@@ @@
         $methodCandidates = [];
         /** @var MethodMetadata $method */
         foreach ($class->getMethods() as $method) {
-            if (preg_match('/(?<action>set|remove|add|has)(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && count($method->getArguments()) === 1) {
+            if (preg_match('/(?<action>set|remove|add|has)(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && count($method->getArguments()) !== 1) {
                 $action = $matches['action'];
                 $relationName = $this->inflector->camelize($matches['relationName']);
                 if (!isset($methodCandidates[$relationName])) {


91) /var/www/html/src/RelationGuesser/VirtualRelationGuesser.php:40    [M] OneZeroInteger

--- Original
+++ New
@@ @@
         $methodCandidates = [];
         /** @var MethodMetadata $method */
         foreach ($class->getMethods() as $method) {
-            if (preg_match('/(?<action>set|remove|add|has)(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && count($method->getArguments()) === 1) {
+            if (preg_match('/(?<action>set|remove|add|has)(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && count($method->getArguments()) === 0) {
                 $action = $matches['action'];
                 $relationName = $this->inflector->camelize($matches['relationName']);
                 if (!isset($methodCandidates[$relationName])) {


92) /var/www/html/src/RelationGuesser/VirtualRelationGuesser.php:44    [M] LogicalNot

--- Original
+++ New
@@ @@
             if (preg_match('/(?<action>set|remove|add|has)(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && count($method->getArguments()) === 1) {
                 $action = $matches['action'];
                 $relationName = $this->inflector->camelize($matches['relationName']);
-                if (!isset($methodCandidates[$relationName])) {
+                if (isset($methodCandidates[$relationName])) {
                     $methodCandidates[$relationName] = [];
                 }
                 $methodCandidates[$relationName][$action] = $method;


93) /var/www/html/src/RelationGuesser/VirtualRelationGuesser.php:49    [M] LogicalAnd

--- Original
+++ New
@@ @@
                 }
                 $methodCandidates[$relationName][$action] = $method;
             } else {
-                if (preg_match('/(?<action>unset|get)(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && count($method->getArguments()) === 0) {
+                if (preg_match('/(?<action>unset|get)(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) || count($method->getArguments()) === 0) {
                     $action = $matches['action'];
                     $relationName = $this->inflector->camelize($matches['relationName']);
                     if (!isset($methodCandidates[$relationName])) {


94) /var/www/html/src/RelationGuesser/VirtualRelationGuesser.php:49    [M] PregMatchMatches

--- Original
+++ New
@@ @@
                 }
                 $methodCandidates[$relationName][$action] = $method;
             } else {
-                if (preg_match('/(?<action>unset|get)(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && count($method->getArguments()) === 0) {
+                if ((int) ($matches = array()) && count($method->getArguments()) === 0) {
                     $action = $matches['action'];
                     $relationName = $this->inflector->camelize($matches['relationName']);
                     if (!isset($methodCandidates[$relationName])) {


95) /var/www/html/src/RelationGuesser/VirtualRelationGuesser.php:50    [M] OneZeroInteger

--- Original
+++ New
@@ @@
                 }
                 $methodCandidates[$relationName][$action] = $method;
             } else {
-                if (preg_match('/(?<action>unset|get)(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && count($method->getArguments()) === 0) {
+                if (preg_match('/(?<action>unset|get)(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && count($method->getArguments()) === 1) {
                     $action = $matches['action'];
                     $relationName = $this->inflector->camelize($matches['relationName']);
                     if (!isset($methodCandidates[$relationName])) {


96) /var/www/html/src/RelationGuesser/VirtualRelationGuesser.php:50    [M] Identical

--- Original
+++ New
@@ @@
                 }
                 $methodCandidates[$relationName][$action] = $method;
             } else {
-                if (preg_match('/(?<action>unset|get)(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && count($method->getArguments()) === 0) {
+                if (preg_match('/(?<action>unset|get)(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && count($method->getArguments()) !== 0) {
                     $action = $matches['action'];
                     $relationName = $this->inflector->camelize($matches['relationName']);
                     if (!isset($methodCandidates[$relationName])) {


97) /var/www/html/src/RelationGuesser/VirtualRelationGuesser.php:54    [M] LogicalNot

--- Original
+++ New
@@ @@
                 if (preg_match('/(?<action>unset|get)(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && count($method->getArguments()) === 0) {
                     $action = $matches['action'];
                     $relationName = $this->inflector->camelize($matches['relationName']);
-                    if (!isset($methodCandidates[$relationName])) {
+                    if (isset($methodCandidates[$relationName])) {
                         $methodCandidates[$relationName] = [];
                     }
                     $methodCandidates[$relationName][$action] = $method;


98) /var/www/html/src/RelationGuesser/VirtualRelationGuesser.php:59    [M] LogicalAnd

--- Original
+++ New
@@ @@
                     }
                     $methodCandidates[$relationName][$action] = $method;
                 } else {
-                    if (preg_match('/count(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && Type::isOneOf(new ScalarTypeMetadata('integer'), ...$method->getReturnTypes()) && count($method->getArguments()) === 0) {
+                    if (preg_match('/count(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && Type::isOneOf(new ScalarTypeMetadata('integer'), ...$method->getReturnTypes()) || count($method->getArguments()) === 0) {
                         $relationName = $this->inflector->camelize($matches['relationName']);
                         if (!isset($methodCandidates[$relationName])) {
                             $methodCandidates[$relationName] = [];


99) /var/www/html/src/RelationGuesser/VirtualRelationGuesser.php:59    [M] LogicalAnd

--- Original
+++ New
@@ @@
                     }
                     $methodCandidates[$relationName][$action] = $method;
                 } else {
-                    if (preg_match('/count(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && Type::isOneOf(new ScalarTypeMetadata('integer'), ...$method->getReturnTypes()) && count($method->getArguments()) === 0) {
+                    if ((preg_match('/count(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) || Type::isOneOf(new ScalarTypeMetadata('integer'), ...$method->getReturnTypes())) && count($method->getArguments()) === 0) {
                         $relationName = $this->inflector->camelize($matches['relationName']);
                         if (!isset($methodCandidates[$relationName])) {
                             $methodCandidates[$relationName] = [];


100) /var/www/html/src/RelationGuesser/VirtualRelationGuesser.php:59    [M] PregMatchMatches

--- Original
+++ New
@@ @@
                     }
                     $methodCandidates[$relationName][$action] = $method;
                 } else {
-                    if (preg_match('/count(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && Type::isOneOf(new ScalarTypeMetadata('integer'), ...$method->getReturnTypes()) && count($method->getArguments()) === 0) {
+                    if ((int) ($matches = array()) && Type::isOneOf(new ScalarTypeMetadata('integer'), ...$method->getReturnTypes()) && count($method->getArguments()) === 0) {
                         $relationName = $this->inflector->camelize($matches['relationName']);
                         if (!isset($methodCandidates[$relationName])) {
                             $methodCandidates[$relationName] = [];


101) /var/www/html/src/RelationGuesser/VirtualRelationGuesser.php:61    [M] Identical

--- Original
+++ New
@@ @@
                     }
                     $methodCandidates[$relationName][$action] = $method;
                 } else {
-                    if (preg_match('/count(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && Type::isOneOf(new ScalarTypeMetadata('integer'), ...$method->getReturnTypes()) && count($method->getArguments()) === 0) {
+                    if (preg_match('/count(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && Type::isOneOf(new ScalarTypeMetadata('integer'), ...$method->getReturnTypes()) && count($method->getArguments()) !== 0) {
                         $relationName = $this->inflector->camelize($matches['relationName']);
                         if (!isset($methodCandidates[$relationName])) {
                             $methodCandidates[$relationName] = [];


102) /var/www/html/src/RelationGuesser/VirtualRelationGuesser.php:61    [M] OneZeroInteger

--- Original
+++ New
@@ @@
                     }
                     $methodCandidates[$relationName][$action] = $method;
                 } else {
-                    if (preg_match('/count(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && Type::isOneOf(new ScalarTypeMetadata('integer'), ...$method->getReturnTypes()) && count($method->getArguments()) === 0) {
+                    if (preg_match('/count(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && Type::isOneOf(new ScalarTypeMetadata('integer'), ...$method->getReturnTypes()) && count($method->getArguments()) === 1) {
                         $relationName = $this->inflector->camelize($matches['relationName']);
                         if (!isset($methodCandidates[$relationName])) {
                             $methodCandidates[$relationName] = [];


103) /var/www/html/src/RelationGuesser/VirtualRelationGuesser.php:64    [M] LogicalNot

--- Original
+++ New
@@ @@
                 } else {
                     if (preg_match('/count(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && Type::isOneOf(new ScalarTypeMetadata('integer'), ...$method->getReturnTypes()) && count($method->getArguments()) === 0) {
                         $relationName = $this->inflector->camelize($matches['relationName']);
-                        if (!isset($methodCandidates[$relationName])) {
+                        if (isset($methodCandidates[$relationName])) {
                             $methodCandidates[$relationName] = [];
                         }
                         $methodCandidates[$relationName]['count'] = $method;


104) /var/www/html/src/RelationGuesser/VirtualRelationGuesser.php:69    [M] PregMatchMatches

--- Original
+++ New
@@ @@
                         }
                         $methodCandidates[$relationName]['count'] = $method;
                     } else {
-                        if (preg_match('/walk(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && Type::isOneOf(new ScalarTypeMetadata('iterable'), ...$method->getReturnTypes()) && count($method->getArguments()) === 0) {
+                        if ((int) ($matches = array()) && Type::isOneOf(new ScalarTypeMetadata('iterable'), ...$method->getReturnTypes()) && count($method->getArguments()) === 0) {
                             $relationName = $this->inflector->camelize($matches['relationName']);
                             if (!isset($methodCandidates[$relationName])) {
                                 $methodCandidates[$relationName] = [];


105) /var/www/html/src/RelationGuesser/VirtualRelationGuesser.php:69    [M] LogicalAnd

--- Original
+++ New
@@ @@
                         }
                         $methodCandidates[$relationName]['count'] = $method;
                     } else {
-                        if (preg_match('/walk(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && Type::isOneOf(new ScalarTypeMetadata('iterable'), ...$method->getReturnTypes()) && count($method->getArguments()) === 0) {
+                        if ((preg_match('/walk(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) || Type::isOneOf(new ScalarTypeMetadata('iterable'), ...$method->getReturnTypes())) && count($method->getArguments()) === 0) {
                             $relationName = $this->inflector->camelize($matches['relationName']);
                             if (!isset($methodCandidates[$relationName])) {
                                 $methodCandidates[$relationName] = [];


106) /var/www/html/src/RelationGuesser/VirtualRelationGuesser.php:69    [M] LogicalAnd

--- Original
+++ New
@@ @@
                         }
                         $methodCandidates[$relationName]['count'] = $method;
                     } else {
-                        if (preg_match('/walk(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && Type::isOneOf(new ScalarTypeMetadata('iterable'), ...$method->getReturnTypes()) && count($method->getArguments()) === 0) {
+                        if (preg_match('/walk(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && Type::isOneOf(new ScalarTypeMetadata('iterable'), ...$method->getReturnTypes()) || count($method->getArguments()) === 0) {
                             $relationName = $this->inflector->camelize($matches['relationName']);
                             if (!isset($methodCandidates[$relationName])) {
                                 $methodCandidates[$relationName] = [];


107) /var/www/html/src/RelationGuesser/VirtualRelationGuesser.php:71    [M] OneZeroInteger

--- Original
+++ New
@@ @@
                         }
                         $methodCandidates[$relationName]['count'] = $method;
                     } else {
-                        if (preg_match('/walk(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && Type::isOneOf(new ScalarTypeMetadata('iterable'), ...$method->getReturnTypes()) && count($method->getArguments()) === 0) {
+                        if (preg_match('/walk(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && Type::isOneOf(new ScalarTypeMetadata('iterable'), ...$method->getReturnTypes()) && count($method->getArguments()) === 1) {
                             $relationName = $this->inflector->camelize($matches['relationName']);
                             if (!isset($methodCandidates[$relationName])) {
                                 $methodCandidates[$relationName] = [];


108) /var/www/html/src/RelationGuesser/VirtualRelationGuesser.php:71    [M] Identical

--- Original
+++ New
@@ @@
                         }
                         $methodCandidates[$relationName]['count'] = $method;
                     } else {
-                        if (preg_match('/walk(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && Type::isOneOf(new ScalarTypeMetadata('iterable'), ...$method->getReturnTypes()) && count($method->getArguments()) === 0) {
+                        if (preg_match('/walk(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && Type::isOneOf(new ScalarTypeMetadata('iterable'), ...$method->getReturnTypes()) && count($method->getArguments()) !== 0) {
                             $relationName = $this->inflector->camelize($matches['relationName']);
                             if (!isset($methodCandidates[$relationName])) {
                                 $methodCandidates[$relationName] = [];


109) /var/www/html/src/RelationGuesser/VirtualRelationGuesser.php:74    [M] LogicalNot

--- Original
+++ New
@@ @@
                     } else {
                         if (preg_match('/walk(?<relationName>[a-zA-Z_][a-zA-Z0-9_]*)/', $method->getName(), $matches) && Type::isOneOf(new ScalarTypeMetadata('iterable'), ...$method->getReturnTypes()) && count($method->getArguments()) === 0) {
                             $relationName = $this->inflector->camelize($matches['relationName']);
-                            if (!isset($methodCandidates[$relationName])) {
+                            if (isset($methodCandidates[$relationName])) {
                                 $methodCandidates[$relationName] = [];
                             }
                             $methodCandidates[$relationName]['walk'] = $method;


110) /var/www/html/src/RelationGuesser/VirtualRelationGuesser.php:82    [M] Foreach_

--- Original
+++ New
@@ @@
                 }
             }
         }
-        foreach ($methodCandidates as $relationName => $actions) {
+        foreach (array() as $relationName => $actions) {
             if ($this->isPlural($relationName)) {
                 (yield new VirtualMultipleRelationMetadata($relationName, $actions['get'] ?? null, $actions['set'] ?? null, $actions['add'] ?? null, $actions['remove'] ?? null, $actions['walk'] ?? null, $actions['count'] ?? null));
             }


111) /var/www/html/src/RelationGuesser/VirtualRelationGuesser.php:86    [M] Coalesce

--- Original
+++ New
@@ @@
         }
         foreach ($methodCandidates as $relationName => $actions) {
             if ($this->isPlural($relationName)) {
-                (yield new VirtualMultipleRelationMetadata($relationName, $actions['get'] ?? null, $actions['set'] ?? null, $actions['add'] ?? null, $actions['remove'] ?? null, $actions['walk'] ?? null, $actions['count'] ?? null));
+                (yield new VirtualMultipleRelationMetadata($relationName, null, $actions['set'] ?? null, $actions['add'] ?? null, $actions['remove'] ?? null, $actions['walk'] ?? null, $actions['count'] ?? null));
             }
             if ($this->isSingular($relationName)) {
                 (yield new VirtualUnaryRelationMetadata($relationName, $actions['get'] ?? $actions['is'] ?? null, $actions['set'] ?? null, $actions['has'] ?? null, $actions['unset'] ?? null));


112) /var/www/html/src/RelationGuesser/VirtualRelationGuesser.php:87    [M] Coalesce

--- Original
+++ New
@@ @@
         }
         foreach ($methodCandidates as $relationName => $actions) {
             if ($this->isPlural($relationName)) {
-                (yield new VirtualMultipleRelationMetadata($relationName, $actions['get'] ?? null, $actions['set'] ?? null, $actions['add'] ?? null, $actions['remove'] ?? null, $actions['walk'] ?? null, $actions['count'] ?? null));
+                (yield new VirtualMultipleRelationMetadata($relationName, $actions['get'] ?? null, null, $actions['add'] ?? null, $actions['remove'] ?? null, $actions['walk'] ?? null, $actions['count'] ?? null));
             }
             if ($this->isSingular($relationName)) {
                 (yield new VirtualUnaryRelationMetadata($relationName, $actions['get'] ?? $actions['is'] ?? null, $actions['set'] ?? null, $actions['has'] ?? null, $actions['unset'] ?? null));


113) /var/www/html/src/RelationGuesser/VirtualRelationGuesser.php:88    [M] Coalesce

--- Original
+++ New
@@ @@
         }
         foreach ($methodCandidates as $relationName => $actions) {
             if ($this->isPlural($relationName)) {
-                (yield new VirtualMultipleRelationMetadata($relationName, $actions['get'] ?? null, $actions['set'] ?? null, $actions['add'] ?? null, $actions['remove'] ?? null, $actions['walk'] ?? null, $actions['count'] ?? null));
+                (yield new VirtualMultipleRelationMetadata($relationName, $actions['get'] ?? null, $actions['set'] ?? null, null, $actions['remove'] ?? null, $actions['walk'] ?? null, $actions['count'] ?? null));
             }
             if ($this->isSingular($relationName)) {
                 (yield new VirtualUnaryRelationMetadata($relationName, $actions['get'] ?? $actions['is'] ?? null, $actions['set'] ?? null, $actions['has'] ?? null, $actions['unset'] ?? null));


114) /var/www/html/src/RelationGuesser/VirtualRelationGuesser.php:89    [M] Coalesce

--- Original
+++ New
@@ @@
         }
         foreach ($methodCandidates as $relationName => $actions) {
             if ($this->isPlural($relationName)) {
-                (yield new VirtualMultipleRelationMetadata($relationName, $actions['get'] ?? null, $actions['set'] ?? null, $actions['add'] ?? null, $actions['remove'] ?? null, $actions['walk'] ?? null, $actions['count'] ?? null));
+                (yield new VirtualMultipleRelationMetadata($relationName, $actions['get'] ?? null, $actions['set'] ?? null, $actions['add'] ?? null, null, $actions['walk'] ?? null, $actions['count'] ?? null));
             }
             if ($this->isSingular($relationName)) {
                 (yield new VirtualUnaryRelationMetadata($relationName, $actions['get'] ?? $actions['is'] ?? null, $actions['set'] ?? null, $actions['has'] ?? null, $actions['unset'] ?? null));


115) /var/www/html/src/RelationGuesser/VirtualRelationGuesser.php:90    [M] Coalesce

--- Original
+++ New
@@ @@
         }
         foreach ($methodCandidates as $relationName => $actions) {
             if ($this->isPlural($relationName)) {
-                (yield new VirtualMultipleRelationMetadata($relationName, $actions['get'] ?? null, $actions['set'] ?? null, $actions['add'] ?? null, $actions['remove'] ?? null, $actions['walk'] ?? null, $actions['count'] ?? null));
+                (yield new VirtualMultipleRelationMetadata($relationName, $actions['get'] ?? null, $actions['set'] ?? null, $actions['add'] ?? null, $actions['remove'] ?? null, null, $actions['count'] ?? null));
             }
             if ($this->isSingular($relationName)) {
                 (yield new VirtualUnaryRelationMetadata($relationName, $actions['get'] ?? $actions['is'] ?? null, $actions['set'] ?? null, $actions['has'] ?? null, $actions['unset'] ?? null));


116) /var/www/html/src/RelationGuesser/VirtualRelationGuesser.php:91    [M] Coalesce

--- Original
+++ New
@@ @@
         }
         foreach ($methodCandidates as $relationName => $actions) {
             if ($this->isPlural($relationName)) {
-                (yield new VirtualMultipleRelationMetadata($relationName, $actions['get'] ?? null, $actions['set'] ?? null, $actions['add'] ?? null, $actions['remove'] ?? null, $actions['walk'] ?? null, $actions['count'] ?? null));
+                (yield new VirtualMultipleRelationMetadata($relationName, $actions['get'] ?? null, $actions['set'] ?? null, $actions['add'] ?? null, $actions['remove'] ?? null, $actions['walk'] ?? null, null));
             }
             if ($this->isSingular($relationName)) {
                 (yield new VirtualUnaryRelationMetadata($relationName, $actions['get'] ?? $actions['is'] ?? null, $actions['set'] ?? null, $actions['has'] ?? null, $actions['unset'] ?? null));


117) /var/www/html/src/RelationGuesser/VirtualRelationGuesser.php:97    [M] Coalesce

--- Original
+++ New
@@ @@
                 (yield new VirtualMultipleRelationMetadata($relationName, $actions['get'] ?? null, $actions['set'] ?? null, $actions['add'] ?? null, $actions['remove'] ?? null, $actions['walk'] ?? null, $actions['count'] ?? null));
             }
             if ($this->isSingular($relationName)) {
-                (yield new VirtualUnaryRelationMetadata($relationName, $actions['get'] ?? $actions['is'] ?? null, $actions['set'] ?? null, $actions['has'] ?? null, $actions['unset'] ?? null));
+                (yield new VirtualUnaryRelationMetadata($relationName, $actions['is'] ?? null, $actions['set'] ?? null, $actions['has'] ?? null, $actions['unset'] ?? null));
             }
         }
     }
 }

118) /var/www/html/src/RelationGuesser/VirtualRelationGuesser.php:97    [M] Coalesce

--- Original
+++ New
@@ @@
                 (yield new VirtualMultipleRelationMetadata($relationName, $actions['get'] ?? null, $actions['set'] ?? null, $actions['add'] ?? null, $actions['remove'] ?? null, $actions['walk'] ?? null, $actions['count'] ?? null));
             }
             if ($this->isSingular($relationName)) {
-                (yield new VirtualUnaryRelationMetadata($relationName, $actions['get'] ?? $actions['is'] ?? null, $actions['set'] ?? null, $actions['has'] ?? null, $actions['unset'] ?? null));
+                (yield new VirtualUnaryRelationMetadata($relationName, $actions['get'] ?? null, $actions['set'] ?? null, $actions['has'] ?? null, $actions['unset'] ?? null));
             }
         }
     }
 }

119) /var/www/html/src/RelationGuesser/VirtualRelationGuesser.php:98    [M] Coalesce

--- Original
+++ New
@@ @@
                 (yield new VirtualMultipleRelationMetadata($relationName, $actions['get'] ?? null, $actions['set'] ?? null, $actions['add'] ?? null, $actions['remove'] ?? null, $actions['walk'] ?? null, $actions['count'] ?? null));
             }
             if ($this->isSingular($relationName)) {
-                (yield new VirtualUnaryRelationMetadata($relationName, $actions['get'] ?? $actions['is'] ?? null, $actions['set'] ?? null, $actions['has'] ?? null, $actions['unset'] ?? null));
+                (yield new VirtualUnaryRelationMetadata($relationName, $actions['get'] ?? $actions['is'] ?? null, null, $actions['has'] ?? null, $actions['unset'] ?? null));
             }
         }
     }
 }

120) /var/www/html/src/RelationGuesser/VirtualRelationGuesser.php:99    [M] Coalesce

--- Original
+++ New
@@ @@
                 (yield new VirtualMultipleRelationMetadata($relationName, $actions['get'] ?? null, $actions['set'] ?? null, $actions['add'] ?? null, $actions['remove'] ?? null, $actions['walk'] ?? null, $actions['count'] ?? null));
             }
             if ($this->isSingular($relationName)) {
-                (yield new VirtualUnaryRelationMetadata($relationName, $actions['get'] ?? $actions['is'] ?? null, $actions['set'] ?? null, $actions['has'] ?? null, $actions['unset'] ?? null));
+                (yield new VirtualUnaryRelationMetadata($relationName, $actions['get'] ?? $actions['is'] ?? null, $actions['set'] ?? null, null, $actions['unset'] ?? null));
             }
         }
     }
 }

121) /var/www/html/src/RelationGuesser/VirtualRelationGuesser.php:100    [M] Coalesce

--- Original
+++ New
@@ @@
                 (yield new VirtualMultipleRelationMetadata($relationName, $actions['get'] ?? null, $actions['set'] ?? null, $actions['add'] ?? null, $actions['remove'] ?? null, $actions['walk'] ?? null, $actions['count'] ?? null));
             }
             if ($this->isSingular($relationName)) {
-                (yield new VirtualUnaryRelationMetadata($relationName, $actions['get'] ?? $actions['is'] ?? null, $actions['set'] ?? null, $actions['has'] ?? null, $actions['unset'] ?? null));
+                (yield new VirtualUnaryRelationMetadata($relationName, $actions['get'] ?? $actions['is'] ?? null, $actions['set'] ?? null, $actions['has'] ?? null, null));
             }
         }
     }
 }

122) /var/www/html/src/Type.php:49    [M] PublicVisibility

--- Original
+++ New
@@ @@
      *
      * @return TypeMetadataInterface[]
      */
-    public static function isSubsetOf(iterable $left, iterable $right) : iterable
+    protected static function isSubsetOf(iterable $left, iterable $right) : iterable
     {
         foreach ($left as $type) {
             if (self::isOneOf($type, ...$right)) {


123) /var/www/html/src/Type.php:51    [M] Foreach_

--- Original
+++ New
@@ @@
      */
     public static function isSubsetOf(iterable $left, iterable $right) : iterable
     {
-        foreach ($left as $type) {
+        foreach (array() as $type) {
             if (self::isOneOf($type, ...$right)) {
                 (yield $type);
             }


124) /var/www/html/src/Type.php:58    [M] PublicVisibility

--- Original
+++ New
@@ @@
             }
         }
     }
-    public static function isOneOf(TypeMetadataInterface $expected, TypeMetadataInterface ...$actual) : bool
+    protected static function isOneOf(TypeMetadataInterface $expected, TypeMetadataInterface ...$actual) : bool
     {
         foreach ($actual as $type) {
             if (self::is($expected, $type)) {


125) /var/www/html/src/Type.php:60    [M] Foreach_

--- Original
+++ New
@@ @@
     }
     public static function isOneOf(TypeMetadataInterface $expected, TypeMetadataInterface ...$actual) : bool
     {
-        foreach ($actual as $type) {
+        foreach (array() as $type) {
             if (self::is($expected, $type)) {
                 return true;
             }


126) /var/www/html/src/Type.php:62    [M] TrueValue

--- Original
+++ New
@@ @@
     {
         foreach ($actual as $type) {
             if (self::is($expected, $type)) {
-                return true;
+                return false;
             }
         }
         return false;


127) /var/www/html/src/Type.php:66    [M] FalseValue

--- Original
+++ New
@@ @@
                 return true;
             }
         }
-        return false;
+        return true;
     }
     public static function is(TypeMetadataInterface $expected, TypeMetadataInterface $actual) : bool
     {


128) /var/www/html/src/Type.php:74    [M] CastString

--- Original
+++ New
@@ @@
     public static function is(TypeMetadataInterface $expected, TypeMetadataInterface $actual) : bool
     {
         if (($expected instanceof ClassTypeMetadata || $expected instanceof ClassReferenceMetadata) && ($actual instanceof ClassTypeMetadata || $actual instanceof ClassReferenceMetadata)) {
-            return is_a((string) $expected, (string) $actual);
+            return is_a((string) $expected, $actual);
         }
         if ($expected instanceof ListTypeMetadata && $actual instanceof ListTypeMetadata) {
             return self::is($expected->getInner(), $actual->getInner());


129) /var/www/html/src/Type.php:74    [M] CastString

--- Original
+++ New
@@ @@
     public static function is(TypeMetadataInterface $expected, TypeMetadataInterface $actual) : bool
     {
         if (($expected instanceof ClassTypeMetadata || $expected instanceof ClassReferenceMetadata) && ($actual instanceof ClassTypeMetadata || $actual instanceof ClassReferenceMetadata)) {
-            return is_a((string) $expected, (string) $actual);
+            return is_a($expected, (string) $actual);
         }
         if ($expected instanceof ListTypeMetadata && $actual instanceof ListTypeMetadata) {
             return self::is($expected->getInner(), $actual->getInner());


130) /var/www/html/src/Type.php:80    [M] LogicalAnd

--- Original
+++ New
@@ @@
             return self::is($expected->getInner(), $actual->getInner());
         }
         if ($expected instanceof CollectionTypeMetadata && $actual instanceof CollectionTypeMetadata) {
-            return self::is($expected->getType(), $actual->getType()) && is_a((string) $expected->getInner(), (string) $actual->getInner());
+            return self::is($expected->getType(), $actual->getType()) || is_a((string) $expected->getInner(), (string) $actual->getInner());
         }
         if ($expected instanceof ScalarTypeMetadata && $actual instanceof ScalarTypeMetadata) {
             return (string) $expected === (string) $actual || in_array((string) $expected, self::$boolean) && in_array((string) $actual, self::$boolean) || in_array((string) $expected, self::$integer) && in_array((string) $actual, self::$integer) || in_array((string) $expected, self::$float) && in_array((string) $actual, self::$float) || in_array((string) $expected, self::$numberCompatible) && in_array((string) $actual, self::$numberMeta) || in_array((string) $expected, self::$string) && in_array((string) $actual, self::$string) || in_array((string) $expected, self::$array) && in_array((string) $actual, self::$array) || in_array((string) $expected, self::$iterable) && (in_array((string) $actual, self::$iterable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$callable) && (in_array((string) $actual, self::$callable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$resource) && in_array((string) $actual, self::$resource);


131) /var/www/html/src/Type.php:81    [M] CastString

--- Original
+++ New
@@ @@
             return self::is($expected->getInner(), $actual->getInner());
         }
         if ($expected instanceof CollectionTypeMetadata && $actual instanceof CollectionTypeMetadata) {
-            return self::is($expected->getType(), $actual->getType()) && is_a((string) $expected->getInner(), (string) $actual->getInner());
+            return self::is($expected->getType(), $actual->getType()) && is_a((string) $expected->getInner(), $actual->getInner());
         }
         if ($expected instanceof ScalarTypeMetadata && $actual instanceof ScalarTypeMetadata) {
             return (string) $expected === (string) $actual || in_array((string) $expected, self::$boolean) && in_array((string) $actual, self::$boolean) || in_array((string) $expected, self::$integer) && in_array((string) $actual, self::$integer) || in_array((string) $expected, self::$float) && in_array((string) $actual, self::$float) || in_array((string) $expected, self::$numberCompatible) && in_array((string) $actual, self::$numberMeta) || in_array((string) $expected, self::$string) && in_array((string) $actual, self::$string) || in_array((string) $expected, self::$array) && in_array((string) $actual, self::$array) || in_array((string) $expected, self::$iterable) && (in_array((string) $actual, self::$iterable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$callable) && (in_array((string) $actual, self::$callable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$resource) && in_array((string) $actual, self::$resource);


132) /var/www/html/src/Type.php:81    [M] CastString

--- Original
+++ New
@@ @@
             return self::is($expected->getInner(), $actual->getInner());
         }
         if ($expected instanceof CollectionTypeMetadata && $actual instanceof CollectionTypeMetadata) {
-            return self::is($expected->getType(), $actual->getType()) && is_a((string) $expected->getInner(), (string) $actual->getInner());
+            return self::is($expected->getType(), $actual->getType()) && is_a($expected->getInner(), (string) $actual->getInner());
         }
         if ($expected instanceof ScalarTypeMetadata && $actual instanceof ScalarTypeMetadata) {
             return (string) $expected === (string) $actual || in_array((string) $expected, self::$boolean) && in_array((string) $actual, self::$boolean) || in_array((string) $expected, self::$integer) && in_array((string) $actual, self::$integer) || in_array((string) $expected, self::$float) && in_array((string) $actual, self::$float) || in_array((string) $expected, self::$numberCompatible) && in_array((string) $actual, self::$numberMeta) || in_array((string) $expected, self::$string) && in_array((string) $actual, self::$string) || in_array((string) $expected, self::$array) && in_array((string) $actual, self::$array) || in_array((string) $expected, self::$iterable) && (in_array((string) $actual, self::$iterable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$callable) && (in_array((string) $actual, self::$callable) || in_array((string) $actual, self::$array)) || in_array((string) $expected, self::$resource) && in_array((string) $actual, self::$resource);


133) /var/www/html/src/TypeGuesser/CompositeTypeGuesser.php:31    [M] Throw_

--- Original
+++ New
@@ @@
     public function __invoke(\ReflectionClass $class, \Reflector $reflector) : \Iterator
     {
         if (!$reflector instanceof \ReflectionProperty && !$reflector instanceof \ReflectionMethod && !$reflector instanceof \ReflectionParameter) {
-            throw new \InvalidArgumentException('Expected object of type \\ReflectionProperty, \\ReflectionMethod or \\ReflectionParameter.');
+            new \InvalidArgumentException('Expected object of type \\ReflectionProperty, \\ReflectionMethod or \\ReflectionParameter.');
         }
         if (($reflector instanceof \ReflectionProperty || $reflector instanceof \ReflectionParameter) && $reflector->getType() !== null) {
             yield from ($this->php74Guesser)($class, $reflector->getType());


134) /var/www/html/src/TypeGuesser/Docblock/DocblockTypeGuesser.php:44    [M] Throw_

--- Original
+++ New
@@ @@
     public function __invoke(string $tagName, \ReflectionClass $class, \Reflector $reflector) : \Iterator
     {
         if (!$reflector instanceof \ReflectionProperty && !$reflector instanceof \ReflectionMethod) {
-            throw new \InvalidArgumentException('Expected object of type \\ReflectionProperty, \\ReflectionMethod or \\ReflectionParameter.');
+            new \InvalidArgumentException('Expected object of type \\ReflectionProperty, \\ReflectionMethod or \\ReflectionParameter.');
         }
         if (($comment = $reflector->getDocComment()) === false) {
             return;


135) /var/www/html/src/TypeGuesser/Docblock/DocblockTypeGuesser.php:100    [M] ArrayItem

--- Original
+++ New
@@ @@
             throw new \RuntimeException(strtr('Could not read class %class.name% source file %class.filename% contents, aborting.', ['%class.name%' => $classContext->isAnonymous() ? '<class@anonymous>' : $classContext->getShortName(), '%class.filename%' => $classContext->getFileName()]), 0, new \Exception(error_get_last()['message']));
         }
         if (($ast = $this->parser->parse($content)) === null) {
-            throw new \RuntimeException(strtr('Could not parse AST of class file %filename%, aborting.', ['%filename%' => $classContext->getFileName()]));
+            throw new \RuntimeException(strtr('Could not parse AST of class file %filename%, aborting.', ['%filename%' > $classContext->getFileName()]));
         }
         $traverser->traverse($ast);
         $context = $nameResolver->getNameContext();


136) /var/www/html/src/TypeGuesser/Docblock/DocblockTypeGuesser.php:100    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
             throw new \RuntimeException(strtr('Could not read class %class.name% source file %class.filename% contents, aborting.', ['%class.name%' => $classContext->isAnonymous() ? '<class@anonymous>' : $classContext->getShortName(), '%class.filename%' => $classContext->getFileName()]), 0, new \Exception(error_get_last()['message']));
         }
         if (($ast = $this->parser->parse($content)) === null) {
-            throw new \RuntimeException(strtr('Could not parse AST of class file %filename%, aborting.', ['%filename%' => $classContext->getFileName()]));
+            throw new \RuntimeException(strtr('Could not parse AST of class file %filename%, aborting.', []));
         }
         $traverser->traverse($ast);
         $context = $nameResolver->getNameContext();


137) /var/www/html/src/TypeGuesser/Docblock/DocblockTypeGuesser.php:100    [M] Throw_

--- Original
+++ New
@@ @@
             throw new \RuntimeException(strtr('Could not read class %class.name% source file %class.filename% contents, aborting.', ['%class.name%' => $classContext->isAnonymous() ? '<class@anonymous>' : $classContext->getShortName(), '%class.filename%' => $classContext->getFileName()]), 0, new \Exception(error_get_last()['message']));
         }
         if (($ast = $this->parser->parse($content)) === null) {
-            throw new \RuntimeException(strtr('Could not parse AST of class file %filename%, aborting.', ['%filename%' => $classContext->getFileName()]));
+            new \RuntimeException(strtr('Could not parse AST of class file %filename%, aborting.', ['%filename%' => $classContext->getFileName()]));
         }
         $traverser->traverse($ast);
         $context = $nameResolver->getNameContext();


138) /var/www/html/src/TypeGuesser/Docblock/DocblockTypeGuesser.php:134    [M] NewObject

--- Original
+++ New
@@ @@
         if ($isCollection && $iterated !== null) {
             if (in_array($type, Type::$iterable)) {
                 if (in_array($iterated, Type::$builtInTypes)) {
-                    return new ListTypeMetadata($this->builtInType($iterated));
+                    new ListTypeMetadata($this->builtInType($iterated));
+                    return null;
                 }
                 return new ListTypeMetadata($this->classReferenceType($this->detectFQCN($iterated, $class)));
             }

139) /var/www/html/src/TypeGuesser/Docblock/DocblockTypeGuesser.php:139    [M] NewObject

--- Original
+++ New
@@ @@
                 if (in_array($iterated, Type::$builtInTypes)) {
                     return new ListTypeMetadata($this->builtInType($iterated));
                 }
-                return new ListTypeMetadata($this->classReferenceType($this->detectFQCN($iterated, $class)));
+                new ListTypeMetadata($this->classReferenceType($this->detectFQCN($iterated, $class)));
+                return null;
             }
             if (in_array($iterated, Type::$builtInTypes)) {
                 return new CollectionTypeMetadata($this->classReferenceType($type), $this->builtInType($iterated));

140) /var/www/html/src/TypeGuesser/Docblock/DocblockTypeGuesser.php:145    [M] NewObject

--- Original
+++ New
@@ @@
                 return new ListTypeMetadata($this->classReferenceType($this->detectFQCN($iterated, $class)));
             }
             if (in_array($iterated, Type::$builtInTypes)) {
-                return new CollectionTypeMetadata($this->classReferenceType($type), $this->builtInType($iterated));
+                new CollectionTypeMetadata($this->classReferenceType($type), $this->builtInType($iterated));
+                return null;
             }
             return new CollectionTypeMetadata($this->classReferenceType($type), $this->classReferenceType($this->detectFQCN($iterated, $class)));
         }

141) /var/www/html/src/TypeGuesser/Native/Php74TypeGuesser.php:22    [M] Throw_

--- Original
+++ New
@@ @@
             try {
                 $classReflector = new \ReflectionClass($reflector->getName());
                 if ($classReflector->isAnonymous()) {
-                    throw new \RuntimeException('Reached an unexpected anonymous class.');
+                    new \RuntimeException('Reached an unexpected anonymous class.');
                 } else {
                     (yield new ClassReferenceMetadata($classReflector->getShortName(), $classReflector->getNamespaceName()));
                 }


142) /var/www/html/src/TypeGuesser/Native/Php74TypeGuesser.php:30    [M] Throw_

--- Original
+++ New
@@ @@
                     (yield new ClassReferenceMetadata($classReflector->getShortName(), $classReflector->getNamespaceName()));
                 }
             } catch (\ReflectionException $e) {
-                throw new \RuntimeException(strtr('The class %class.name% was not declared. It does either not exist or it does not have been auto-loaded.', ['%class.name%' => $reflector->getName()]), 0, $e);
+                new \RuntimeException(strtr('The class %class.name% was not declared. It does either not exist or it does not have been auto-loaded.', ['%class.name%' => $reflector->getName()]), 0, $e);
             }
         }
         if ($reflector->allowsNull()) {


143) /var/www/html/src/TypeGuesser/Native/Php74TypeGuesser.php:33    [M] ArrayItemRemoval

--- Original
+++ New
@@ @@
                     (yield new ClassReferenceMetadata($classReflector->getShortName(), $classReflector->getNamespaceName()));
                 }
             } catch (\ReflectionException $e) {
-                throw new \RuntimeException(strtr('The class %class.name% was not declared. It does either not exist or it does not have been auto-loaded.', ['%class.name%' => $reflector->getName()]), 0, $e);
+                throw new \RuntimeException(strtr('The class %class.name% was not declared. It does either not exist or it does not have been auto-loaded.', []), 0, $e);
             }
         }
         if ($reflector->allowsNull()) {


144) /var/www/html/src/TypeGuesser/Native/Php74TypeGuesser.php:34    [M] ArrayItem

--- Original
+++ New
@@ @@
                     (yield new ClassReferenceMetadata($classReflector->getShortName(), $classReflector->getNamespaceName()));
                 }
             } catch (\ReflectionException $e) {
-                throw new \RuntimeException(strtr('The class %class.name% was not declared. It does either not exist or it does not have been auto-loaded.', ['%class.name%' => $reflector->getName()]), 0, $e);
+                throw new \RuntimeException(strtr('The class %class.name% was not declared. It does either not exist or it does not have been auto-loaded.', ['%class.name%' > $reflector->getName()]), 0, $e);
             }
         }
         if ($reflector->allowsNull()) {


145) /var/www/html/src/TypeGuesser/Native/Php74TypeGuesser.php:37    [M] DecrementInteger

--- Original
+++ New
@@ @@
                     (yield new ClassReferenceMetadata($classReflector->getShortName(), $classReflector->getNamespaceName()));
                 }
             } catch (\ReflectionException $e) {
-                throw new \RuntimeException(strtr('The class %class.name% was not declared. It does either not exist or it does not have been auto-loaded.', ['%class.name%' => $reflector->getName()]), 0, $e);
+                throw new \RuntimeException(strtr('The class %class.name% was not declared. It does either not exist or it does not have been auto-loaded.', ['%class.name%' => $reflector->getName()]), -1, $e);
             }
         }
         if ($reflector->allowsNull()) {


146) /var/www/html/src/TypeGuesser/Native/Php74TypeGuesser.php:37    [M] OneZeroInteger

--- Original
+++ New
@@ @@
                     (yield new ClassReferenceMetadata($classReflector->getShortName(), $classReflector->getNamespaceName()));
                 }
             } catch (\ReflectionException $e) {
-                throw new \RuntimeException(strtr('The class %class.name% was not declared. It does either not exist or it does not have been auto-loaded.', ['%class.name%' => $reflector->getName()]), 0, $e);
+                throw new \RuntimeException(strtr('The class %class.name% was not declared. It does either not exist or it does not have been auto-loaded.', ['%class.name%' => $reflector->getName()]), 1, $e);
             }
         }
         if ($reflector->allowsNull()) {


147) /var/www/html/src/VirtualMultipleTrait.php:20    [M] PublicVisibility

--- Original
+++ New
@@ @@
     private $walker;
     /** @var MethodMetadata */
     private $counter;
-    public function getAccessor() : ?MethodMetadata
+    protected function getAccessor() : ?MethodMetadata
     {
         return $this->accessor;
     }


148) /var/www/html/src/VirtualMultipleTrait.php:25    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->accessor;
     }
-    public function getMutator() : ?MethodMetadata
+    protected function getMutator() : ?MethodMetadata
     {
         return $this->mutator;
     }


149) /var/www/html/src/VirtualMultipleTrait.php:30    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->mutator;
     }
-    public function getAdder() : ?MethodMetadata
+    protected function getAdder() : ?MethodMetadata
     {
         return $this->adder;
     }


150) /var/www/html/src/VirtualMultipleTrait.php:35    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->adder;
     }
-    public function getRemover() : ?MethodMetadata
+    protected function getRemover() : ?MethodMetadata
     {
         return $this->remover;
     }


151) /var/www/html/src/VirtualMultipleTrait.php:40    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->remover;
     }
-    public function getWalker() : ?MethodMetadata
+    protected function getWalker() : ?MethodMetadata
     {
         return $this->walker;
     }


152) /var/www/html/src/VirtualMultipleTrait.php:45    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->walker;
     }
-    public function counter() : ?MethodMetadata
+    protected function counter() : ?MethodMetadata
     {
         return $this->counter;
     }
 }

153) /var/www/html/src/VirtualUnaryRelationMetadata.php:32    [M] PublicVisibility

--- Original
+++ New
@@ @@
         $this->checker = $checker;
         $this->remover = $remover;
     }
-    public function accessor() : MethodMetadata
+    protected function accessor() : MethodMetadata
     {
         return $this->accessor;
     }


154) /var/www/html/src/VirtualUnaryRelationMetadata.php:37    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->accessor;
     }
-    public function mutator() : MethodMetadata
+    protected function mutator() : MethodMetadata
     {
         return $this->mutator;
     }


155) /var/www/html/src/VirtualUnaryRelationMetadata.php:42    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->mutator;
     }
-    public function checker() : MethodMetadata
+    protected function checker() : MethodMetadata
     {
         return $this->checker;
     }


156) /var/www/html/src/VirtualUnaryRelationMetadata.php:47    [M] PublicVisibility

--- Original
+++ New
@@ @@
     {
         return $this->checker;
     }
-    public function remover() : MethodMetadata
+    protected function remover() : MethodMetadata
     {
         return $this->remover;
     }
 }